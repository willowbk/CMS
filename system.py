import numpy as np
from Bio.Seq import Seq
from scipy import stats
from sklearn import datasets, linear_model
from scipy.special import binom
from time import time
import math

#file_name = 'systems/Codon/Data/s_cer_ppm0_fake_5-fold_12_param.data'
#file_name = 'systems/Codon/Data/e_coli_ppm0_fake_5-fold_13_param.data'
#file_name = 'systems/Codon/Data/e_coli_ppm0_fake_5-fold_8_param.data'
#file_name = 'systems/Codon/Data/e_coli_ppm0_fake_5-fold_3_param.data'
#file_name = 'systems/Codon/Data/e_coli_ppm0_5-fold.data'
#file_name = 'systems/Codon/Data/b_sub_ppm0_5-fold.data'
#file_name = 'systems/Codon/Data/s_cer_ppm0_5-fold.data'



def Import_Data(File):
	
	global codons, amino_acids, freqs, amino_acid_codons, N, organism, file_name, num_data, rev_comp, trans
	
	file_name = 'systems/Codon/Data/'+File+'.data'
	organism = file_name.split('/')[-1].split('_ppm')[0]
	
	freqs = {}
	codons = set([])
	amino_acids = set([])
	data_type = ''
	num_data = 0
	
	in_file = open(file_name, 'r')
	for line in in_file.readlines():
		
		if not line[0] == '#':
			term = line.split(':')[0]
			
			if len(term) == 3:
				codons.add(term)
			
			if len(term) < 3:
				amino_acids.add(term)
		
			key = data_type + term
			
			if key in freqs:
				freqs[key] += float(line.split(':')[1])
			else:
				freqs[key] = float(line.split(':')[1])
		
		else: 
			if len(line.split()) == 7 and line.split()[4] == 'set':
				data_type = line.split()[5][:-1]+':'
				num_data += 1/2
			else:
				data_type = ''
	in_file.close()
	
	codons = list(codons)
	codons.sort()
	
	rev_comp = {}
	trans = {}
	
	for codon in codons:
		rev_comp[codon] = str(Seq(codon).reverse_complement())
		trans[codon] = str(Seq(codon).translate())
		
	amino_acids = list(amino_acids)
	amino_acids.sort()
	
	amino_acid_codons = {amino_acid:[] for amino_acid in amino_acids}
	amino_acid_codons['U'] = ['TGA']

	for codon in codons:
		amino_acid = str(Seq(codon).translate())
	
		if amino_acid in amino_acids:
			amino_acid_codons[amino_acid].append(codon)

	amino_acids = list(set(amino_acids))
	amino_acids.sort()

	
	N = len(codons)
	
	
def Set_Data(set_num):
	
	global codon_freqs, amino_freqs, freqs, data_points, best_logL, data_set
	
	data_set = set_num
	
	if data_set == 'all':
		codon_freqs = np.zeros(N)
		amino_freqs = np.zeros(len(amino_acids))
		
		for i in range(int(num_data)):
			codon_freqs += np.array([freqs[str(i) + ':' + codon] for codon in codons])
			amino_freqs += np.array([freqs[str(i) + ':' + amino] for amino in amino_acids])/num_data
			
	else:
		codon_freqs = np.array([freqs[str(data_set) + ':' + codon] for codon in codons])
		amino_freqs = np.array([freqs[str(data_set) + ':' + amino] for amino in amino_acids])
	
	data_points = sum(codon_freqs)
	codon_freqs = codon_freqs/data_points
	
		
	best_logL = sum([data_points*codon_freqs[i]*np.log(codon_freqs[i]) for i,codon in enumerate(codons) if not codon_freqs[i] == 0])
	best_logL += sum([data_points*amino_freqs[i]*np.log(amino_freqs[i]) for i,amino in enumerate(amino_acids) if not amino_freqs[i] == 0])
	#print('# data points = '+str(data_points))
	#print('target logL/N = '+str(best_logL/(2*data_points)))


		
	
	

show_spec = False

if show_spec:
	import matplotlib.pyplot as plt
	plt.style.use('classic')
	
def sig_figs(num, n):
	if num == 0.:
		return '0.000', 0
	else:
		pow_10 = int(math.floor(np.log(num)/np.log(10)))	
		coef = round(num/(10**pow_10), n-1)
		
		return coef, pow_10

#Import_Data('s_cer_ppm0_5-fold')

def Generate_Seq():
	
	# E. coli
	#seq0 = ['3.6377483480163115', '5.135942369041777', '1731.059770667136', '0.23700229405919337', '0.3867200693253693', '0.5360032625104594', '0.08961661107803884', '0', '1.0332662423751902', '0.6576260214880403', '2.654586372554576', '0.6794295421776296']
	#seq1 = ['3.3685237077121695', '4.685363072060382', '1713.8544235716495', '0.20690041632589287', '0.34537467848138426', '0.5163535443296107', '0.08309888767897', '0', '1.0546726041808656', '0.5471541597977325', '2.0741429245156544', '0.5770160973221947']
	#seq2 = ['3.8171519785446932', '4.300208489662132', '1926.3073700602954', '0.17400911151520773', '0.28882126951322196', '0.4777037602366412', '0.039525147406623065', '0.0', '0.9166764728677962', '0.473063929385987', '1.7038619337369534', '0.4335977072164881']
	#seq3 = ['3.638186627954956', '4.320347281278324', '847.9091747963962', '0.1623273487316937', '0.30799440279944673', '0.47546746934210105', '0.0213623046875', '0.0', '0.8693890696214349', '0.37591389526419944', '1.5268680641637518', '0.3267244834140588']
	#seq4 = ['3.369845704560535', '4.072520949572141', '492.13898695017065', '0.15511344636360827', '0.28106804893280035', '0.46440750763218036', '0.02288818359375', '0', '0.920993007794707', '0.360820300790275', '1.4131009190226205', '0.33216432189834827']
	# ave seq = ['3.56629127336', '4.50287643232', '1342.25394521', '0.187070523399', '0.32199569381', '0.49398710881', '0.051298226889', '0.0', '0.958999479368', '0.482915661345', '1.8745120428', '0.469786430406']
	# sig seq = ['0.194235051201', '0.416434533094', '631.950845161', '0.0342435626082', '0.0438961057575', '0.0306132810323', '0.0328689670971', '0.0', '0.0805211978218', '0.123596122776', '0.502803756357', '0.155052108091']
	# F = -0.093729075654358229
	
	# B. sub
	#seq0 = ['3.022692114944115', '1.9623615094771145', '0.7940331639765381', '0.04031616384514398', '0.21900476144033154', '0.2751805113102047', '0', '0.014942360431928472', '8.813875175918461', '0.1396471655593932', '0.2531236154273169', '0.792220401637781']
	#seq1 = ['3.07106902700694', '1.9427382289346726', '0.8481500525929384', '0.04028894425037877', '0.24423648457569158', '0.2656918859147877', '0', '0.01434326171875', '9.17313460723107', '0.1401246484905367', '0.24595516655693472', '0.8067086902193674']
	#seq2 = ['3.1115086268757084', '1.972175188816267', '0.8500738943197993', '0.04034637071494396', '0.20751174952247697', '0.26225569828941575', '0.0', '0.014255867870212912', '8.4328113621377', '0.14039424488352129', '0.25006299460130677', '0.7450158479630488']
	#seq3 = ['2.8930004582435758', '1.8679651485727857', '0.7823506963195179', '0.040427037075759335', '0.234527587890625', '0.25695442656630485', '0.0', '0.015662341735057525', '9.506034604249763', '0.1392089540815819', '0.2461072237247156', '0.8117356672133158']
	#seq4 = ['2.9360299639039096', '1.926910236961247', '0.7586770509059778', '0.03953572897081986', '0.20545500189651755', '0.2612587771782203', '0', '0.016358943428119697', '9.234696408002879', '0.14098857693523226', '0.25939583683102685', '0.7620960532877955']
	# ini seq = ['3.033681011199951', '1.8820072174072262', '0.8065437316894517', '0.0390625', '0.23039746284484863', '0.27073814392089846', '0.0', '0.015180110931396484', '8.690768480300903', '0.146484375', '0.25095462799072266', '0.7793176174163818']
	# ave seq = ['3.00686003819', '1.93443006255', '0.806656971623', '0.0401828489714', '0.222147117065', '0.264268259852', '0.0', '0.0151125550368', '9.03211043151', '0.14007271799', '0.250928967428', '0.783555332064']
	
	# S. cer
	#seq0 = ['2.872992502889264', '1.8092255375333166', '1.0412888464071424', '0.2130616358337868', '0.09511856040832997', '0.22165133528074907', '0.0018310546875', '0.00389604870135615', '10.0', '0.027121512214387394', '0.23812820857223566', '0.21322475954974357']
	#seq1 = ['2.86577184669355', '1.8289809608240533', '1.0402864334982829', '0.22638987624305676', '0.08702382472191471', '0.2175738355179238', '0.0', '0.0030517578125', '10.0', '0.027471996087635942', '0.24331084060237387', '0.22955483372099814']
	#seq2 = ['2.8705081015428533', '1.8308120381327135', '1.0867679500334793', '0.2168261955012621', '0.0802705190160401', '0.21412746392673057', '0.0', '0.0018310546875', '10.0', '0.02710292299770127', '0.24031231390916072', '0.20750826357298222']
	#seq3 = ['2.8278598766771004', '1.7752002450599182', '1.0711744821383078', '0.21022214741831455', '0.08584941773722773', '0.2176999678347071', '0', '0.00244140625', '9.999542236328125', '0.02707073633435722', '0.2362221939915424', '0.20299015578627627']
	#seq4 = ['2.8860654211648837', '1.8083466694789958', '1.0953120110540628', '0.20751385206883802', '0.07508084487300189', '0.20765895739404835', '0.0', '0.00244140625', '9.9993896484375', '0.02806354783929569', '0.22997153729559253', '0.20284765794286067']
	# ini seq = ['2.8702765258037073', '1.8055244172963252', '1.042033206561872', '0.2141800178382746', '0.08226680526022781', '0.21287966746998355', '0.0', '0.003204345703125', '9.725169587402329', '0.028485915779925878', '0.23481861937619314', '0.2125252273442267']
	# ave seq = ['2.86463954979', '1.81051309021', '1.06696594463', '0.214802741413', '0.0846686333513', '0.215742311991', '0.0003662109375', '0.00273233474027', '9.99978637695', '0.0273661430947', '0.237589018874', '0.211225134115']
	# sig seq = ['0.0218935272392', '0.022396750518', '0.0254186957526', '0.00733991242916', '0.00754008042507', '0.00524527899357', '0.000818872550354', '0.000780680118346', '0.000297448557886', '0.00042248445978', '0.00500850629248', '0.0110881523623']
	
	# S. pom
	#seq0 = ['2.809815222539569', '2.739123530309888', '1.6495449432511007', '0.38039581504526526', '0.5139055076426692', '0.3661538972040961', '0.17002992042971668', '0.033416748046875', '9.94110107421875', '0.09882420024072064', '0.0', '0.1054689571103567']
	#seq1 = ['3.0070627083788173', '2.824644553051108', '1.7034615018901935', '0.37044192044465707', '0.4878474636832652', '0.35784590450958775', '0.16931772923479346', '0.025634765625', '9.93682861328125', '0.10528685371000926', '0.0', '0.11712659903877667']
	#seq2 = ['2.9763680433690265', '2.8108757881095174', '1.7025875327672417', '0.3643884080420553', '0.5131168721849606', '0.35836163902148316', '0.1596538665184155', '0.03299920748433495', '9.99786376953125', '0.10103565403198131', '0', '0.10658895764399942']
	#seq3 = ['3.0277087584317917', '3.209751176692378', '1.8770127728642165', '0.3959682519953661', '0.4948574342096139', '0.3674310297541837', '0.16756206585279387', '0.01857897171202406', '9.8828125', '0.09481632876586787', '0.0', '0.003509521484375']
	#seq4 = ['2.8865102963558775', '2.7483976059673196', '1.7193371727380486', '0.3737139256244788', '0.5102928211402843', '0.359780349371391', '0.16631908928106778', '0.03021240234375', '9.9957275390625', '0.09949402906942549', '0.0', '0.11606722827186329']
	# init seq = ['2.9053088706988413', '2.766626071779072', '1.7240730808304474', '0.3746128011086261', '0.5054976575260574', '0.35905265095797395', '0.1685453244787593', '0.028533935546875', '9.998016357421875', '0.09721461466347246', '0', '0.11961445282156626']
	# ave seq = ['2.94149300582', '2.86655853083', '1.7303887847', '0.37698166423', '0.504004019772', '0.361914563972', '0.166576534263', '0.0281684190424', '9.95086669922', '0.0998914131636', '0.0', '0.0897522527099']
	# sig seq = ['0.0912564341372', '0.195473927332', '0.0861023328675', '0.0120849431789', '0.0118883019803', '0.00453143129886', '0.00413524198279', '0.00619346917704', '0.0478148222029', '0.00379056081075', '0.0', '0.0485029145909']
	
	# S. ent
	#seq0 = ['3.7392514097679976', '1.4611625964989572', '37.597866964990516', '0.09327595582487329', '0.20556426562141694', '10.0', '0.008392333984375', '0', '0.9167037853412736', '0.0', '0.33984740981427364', '0.0']
	#seq1 = ['3.9269939945888708', '1.5112407829625258', '264.71857652557924', '0.09990160631734143', '0.23821224810761027', '10.0', '0.007503579315840473', '0.0', '0.8914073384049168', '0.0', '0.36209343201246613', '0.0']
	#seq2 = ['3.907864727745329', '1.5158157555178446', '45.55849156802237', '0.09876116012510483', '0.23418864428887576', '10', '0.01068115234375', '0.0', '0.8934752939381987', '0.0', '0.34990688906775574', '0.0']
	#seq3 = ['3.85711539228973', '1.5252025806183507', '50.3065521459441', '0.09355277254452997', '0.23218780367688505', '9.995269775390625', '0.003662109375', '0.0', '0.8620908955879268', '0.0', '0.33202385293655023', '0.0']
	#seq4 = ['3.8367958524935535', '1.4935276689047152', '713.0885696697044', '0.09453630409697295', '0.22936126337183718', '10.0', '0.006881963983236011', '0.0', '0.8677489004576183', '0', '0.331507105141007', '0']
	# init seq = ['3.811104866035084', '1.4577266439989707', '26.100014176383233', '0.09687432958413544', '0.230865478515625', '9.998779296875', '0.00701904296875', '0.0', '0.9061008010536064', '0.0', '0.3479254894516736', '0.0']
	# ave seq = ['3.85360427538', '1.5013898769', '222.254011375', '0.0960055597818', '0.227902845013', '9.99905395508', '0.00742422780044', '0.0', '0.886285242746', '0.0', '0.343075737794', '0.0']
	# sig seq = ['0.0736574444167', '0.0252598475132', '290.519762681', '0.00309831111735', '0.0128966570164', '0.00211542075508', '0.00254944448957', '0.0', '0.0219783009668', '0.0', '0.0129878485807', '0.0']
	
	# D. mel
	#seq0 = ['1.3517911079450315', '0.851150736000458', '23.09215534270788', '0.13544358602261544', '0.0022228028651124923', '0.8830847466905902', '0.06537051296107536', '0', '1.512739138198734', '0.0', '0.22240157581558453', '0.0']
	#seq1 = ['1.360873583158742', '0.853551263842849', '87.84969599591253', '0.13470947697471145', '0.0025664724944809915', '0.89612599838516', '0.06071857642129544', '0.0', '1.467171421147751', '0.0', '0.23144328923000115', '0.0']
	#seq2 = ['1.379406969029682', '0.8647871447556272', '496.7985951614407', '0.1295385487565674', '0.0023809820787007775', '0.917300933058243', '0.0616348969290528', '0.0', '1.4743194695129054', '0.0', '0.22204832805860203', '0.0']
	#seq3 = ['1.4089888788036686', '0.9008267680313612', '99.26605762710409', '0.1318210927818379', '0.0025782158498029025', '0.9305421523956595', '0.06269211779245895', '0', '1.5399121685555803', '0.0', '0.21952272228688646', '0.0']
	#seq4 = ['1.3939570783218862', '0.8896775886521681', '71.13869229912645', '0.1420945875023785', '0', '0.9354367360361937', '0.0647465976737208', '0.0', '1.5581864225868174', '0.0', '0.23483902143813645', '0.0']
	# ave seq = ['1.37900352345', '0.871998700256', '155.629039285', '0.134721458408', '0.00194969465762', '0.912498113313', '0.0630325403555', '0.0', '1.510465724', '0.0', '0.226050987366', '0.0']
	# sig seq = ['0.0234099519431', '0.0221954536062', '192.919760052', '0.00474761302417', '0.00109969995676', '0.022405507803', '0.00198921040568', '0.0', '0.0397821409542', '0.0', '0.00667578072933', '0.0']
	
	# C. ele
	#seq0 = ['3.1096073043880126', '0.35192768401129415', '0.9616050421257816', '1.1820793653337422', '0.01856728497881449', '0.5739844695718972', '0.18362209840391036', '0.9242490054455629', '1.126418962605157', '0.13575843311939118', '0.030687038644929485', '0.06859567972407127']
	#seq1 = ['3.0116259590067793', '0.34285770883359884', '0.9073171190104056', '1.1419397813852972', '0.006561279296875', '0.5620590231666892', '0.1846823397669359', '0.9210935843204929', '1.1650850071370569', '0.14443973389402912', '0.02532958984375', '0.07654707513960293']
	#seq2 = ['3.013098456176286', '0.35235316747155204', '0.9009305113484968', '1.167059169928522', '0.01617431640625', '0.5626170243280834', '0.18720051631855356', '0.8930774113847744', '1.1458967782044365', '0.13910662989356354', '0.030364990234375', '0.07423855480614011']
	#seq3 = ['4.3452051237146705', '0.1', '0.6533789162471513', '1.8991752937227675', '0.0128173828125', '0.6109619140625', '0.2903497958784378', '1.4959932049050542', '1.2678590759142205', '0.3282807233067597', '0.1544189453125', '0.20917594301974796']
	#seq4 = ['4.322615073760298', '0.1', '0.8112002672836317', '1.7949877196212582', '0.035247802734375', '0.6536865234375', '0.29755164270784984', '1.5838234950200158', '1.5907853997807664', '0.2619498680466381', '0.13214111328125', '0.27093397064535374']
	# init seq = ['3.1245146897183', '0.3365764218593108', '0.852441682131396', '1.1813513771936055', '0.033416748046875', '0.5806918165195532', '0.185546875', '0.9184958324715864', '1.1041867098104206', '0.14572078876867936', '0.03144508637214871', '0.078125']
	# ave seq = ['3.56043038341', '0.249427712063', '0.846886371203', '1.437048266', '0.0178736132458', '0.592661790913', '0.228681278615', '1.16364734022', '1.25920904473', '0.201907077652', '0.0745883354634', '0.139898244667']
	# sig seq = ['0.707247636726', '0.136460928641', '0.120883881224', '0.376388865472', '0.0107094072685', '0.0395188948869', '0.0596511170338', '0.345091925586', '0.193229081906', '0.0883140277719', '0.063235078574', '0.0940457100195']
	
	# V. cho
	#seq0 = ['3.597424281316962', '3.8358338745362075', '19.470282081087063', '0.08256764976852658', '0.09620639509916155', '0.2003777482232306', '0', '0.0006116780323188867', '9.999847412109375', '0.00014406384710158925', '0.7462081205455893', '0.0']
	#seq1 = ['3.548726455703675', '3.7717971326640827', '25.436286327456873', '0.0874039239590228', '0.11662837960216202', '0.20431066641181234', '0.0', '0.0006042431066935675', '9.34600830078125', '0.00014760497341152954', '0.7946249894016395', '0.0006103515625']
	#seq2 = ['3.4667026453523633', '3.666235345256808', '23.516923360997545', '0.07883929173121723', '0.146331787109375', '0.22216796875', '0.0', '0.000457763671875', '9.909210205078125', '0.00014165917559322362', '0.7288395343334989', '0']
	#seq3 = ['3.4932318170688914', '3.7431108415222742', '26.607446616618255', '0.08550706866482527', '0.12477592467237675', '0.21124208631543318', '0.0', '0.0004445210317496114', '10', '0.00014749253483225101', '0.7405909002156281', '0.0']
	#seq4 = ['3.4372455686548515', '3.6504659900370697', '29.93918448167142', '0.08418170309005257', '0.1202392578125', '0.21527785879191388', '0.0', '0.00030339908784477246', '9.384613037109375', '0.00015001619483059469', '0.7502892503998924', '0.00030517578125']
	# ini seq = ['3.5520600670348235', '3.765043415493969', '23.045352906472825', '0.08165945767397281', '0.09596055291565556', '0.20003616244745212', '0', '0.0006195003501215401', '10', '0.00014617844298761394', '0.7593980879643737', '0.0']
	# ave seq = ['3.50866615362', '3.7334886368', '24.9940245736', '0.0836999274427', '0.120836348859', '0.210675265698', '0.0', '0.000484320986096', '9.72793579102', '0.000146167345154', '0.752110558979', '0.00018310546875']
	
	# D. sim
	#seq0 = ['1.6706398756821779', '0.7218500021955185', '16.372835480315047', '0.044452969402532294', '0.14524746542894362', '9.91485595703125', '0.11713988649479484', '0.000152587890625', '0.9370373345728342', '0.0', '0.08001084995667612', '0.0']
	#seq1 = ['1.6474148766453705', '0.6890963613036447', '15.383235480279781', '0.04704320797315365', '0.15589812692549185', '8.996429443359375', '0.1128770463520132', '0.000152587890625', '1.0019802161335032', '0', '0.08774125716406679', '0.0']
	#seq2 = ['1.6827820988005628', '0.7218564452502345', '15.302946845295002', '0.04740683311559077', '0.14105214316130046', '7.07242343025935', '0.1186271936305277', '0.000152587890625', '0.9562945504551293', '0.0', '0.07847460599369262', '0.0']
	#seq3 = ['1.668537597158706', '0.7243750715984851', '14.4331250291859', '0.0446602460464733', '0.1420169095072485', '9.553138629461191', '0.11580428501891397', '0.000152587890625', '0.9709380121187204', '0.0', '0.07058191999672625', '0.0']
	#seq4 = ['1.657040454758014', '0.6914797464729275', '17.23408277498434', '0.04735760720593732', '0.14505207926396613', '8.7017822265625', '0.11908569422715806', '0.000152587890625', '0.9621183407736907', '0.0', '0.09068936451401163', '0.0']
	# ave seq = ['1.66528298061', '0.709731525364', '15.745245122', '0.0461841727487', '0.145853344857', '8.84772593733', '0.116706821145', '0.000152587890625', '0.965673690811', '0.0', '0.081499599525', '0.0']
	# sig seq = ['0.013534367023', '0.0177991715943', '1.07921789957', '0.00149408884731', '0.00590924143082', '1.09903194178', '0.00250080785174', '0.0', '0.0238040256371', '0.0', '0.00796826138597', '0.0']
	
	# C. bri
	#seq0 = ['3.45382331029604', '0.100762939453125', '0.6176217723388213', '1.4786504104095877', '0.26374751738695373', '1.6323895281854135', '0.5184278375541416', '1.3008336927420652', '1.306637744815051', '0.026191134281958142', '0.053879151989004025', '0']
	#seq1 = ['3.5408769522575563', '0.1', '0.6104974834238518', '1.4790440592289897', '0.2584194283464826', '1.720427760259136', '0.5231806857129294', '1.2896366902831504', '1.2901226122800493', '0.032859057725905416', '0.051365569483440794', '0.0']
	#seq2 = ['3.365990434002693', '0.1', '0.6153384289198202', '1.4801777056173044', '0.253359531702756', '1.64471451440767', '0.517905182014213', '1.2954324014167962', '1.3440684778101246', '0.027122981497892204', '0.056108696317817806', '0']
	#seq3 = ['3.4784224346351538', '0.1', '0.6085938731650381', '1.5323495553492537', '0.28992397726711894', '1.7087326567292702', '0.5393763607047429', '1.2509017244507985', '1.349029810970502', '0.025995067946083618', '0.06332146055138559', '0.0']
	#seq4 = ['3.460382637292762', '0.1006103515625', '0.6121096421843878', '1.4993731967480586', '0.26747399702284275', '1.6510426956800084', '0.5183652956178901', '1.2773773604871728', '1.3186962849665482', '0.026835120014481434', '0.05754320682360216', '0.0']
	# ave seq = ['3.4598991537', '0.100274658203', '0.612832240006', '1.49391898547', '0.266584890345', '1.67146143105', '0.523451072321', '1.28283637388', '1.32171098617', '0.0278006722933', '0.0564436170331', '0.0']
	# sig seq = ['0.062762474976', '0.00037994078363', '0.00364546266704', '0.0231833599212', '0.014099105071', '0.0401428124242', '0.00915891410751', '0.0198647323195', '0.0249012650995', '0.00286485771334', '0.00449969579344', '0.0']
	
	# V. par
	#seq0 = ['3.3551929368811018', '2.450814065019465', '85.60419805331418', '0.09235145178091711', '0.222320556640625', '0.1705940788344279', '0', '0.00031160428646287365', '4.395856582824888', '0.0', '0.4345848882107543', '0.0']
	#seq1 = ['3.3880726781285593', '2.4961157053420466', '26.070020592165847', '0.08878919499291264', '0.20897015836461333', '0.16946309275545626', '0', '0.00030517578125', '5.11186942775947', '0.0', '0.4283311166544232', '0.0004818844987337092']
	#seq2 = ['3.360793342763655', '2.4446253670355205', '23.800643476931782', '0.0846462025413167', '0.21065008619521502', '0.16978338201933477', '0', '0.000457763671875', '5.137281301242662', '0.0', '0.4490464995300928', '0.000493497059749445']
	#seq3 = ['3.3470264652665658', '2.470043189734308', '23.151429470885365', '0.08489092323265891', '0.21767456352493', '0.173343936651096', '0.0', '0.00030517578125', '5.458903717903937', '0.0', '0.43408873310523394', '0.0004984347316327887']
	#seq4 = ['3.4011573771965886', '2.5006948517699725', '114.12402724158471', '0.08419804457153239', '0.244140625', '0.17650434055578484', '0.0', '0.0003028072465552207', '4.175191628146439', '0', '0.43008956098914314', '0.0']
	# ave seq = ['3.37044856005', '2.47245863578', '54.550063767', '0.0869751634239', '0.220751197945', '0.171937766163', '0.0', '0.000336505353479', '4.85582053158', '0.0', '0.435228159698', '0.000294763258023']
	# sig seq = ['0.0230661698801', '0.0255242703407', '42.5908743847', '0.00352404923769', '0.0141405376154', '0.00297497026354', '0.0', '6.78643675302e-05', '0.543900972159', '0.0', '0.00816445047626', '0.00026914787218']
	
	# C. tra
	#seq0 = ['1.9769441550558895', '0.7313852412568238', '0.8915747549702724', '0.05984604305221094', '0.0', '0.6415013027328074', '0.063629150390625', '0.36956787109375', '10', '0.03519566806858204', '0.4775986771717645', '0.15378941128259507']
	#seq1 = ['2.040656279252986', '0.7503207538724872', '0.9146409747161973', '0.06405441375924004', '0', '0.621998267024012', '0.04913330078125', '0.2163929531301474', '10', '0.0383866091284017', '0.49534415951657695', '0.183404499921109']
	#seq2 = ['1.965640135517725', '0.6785745861639099', '0.8488842826681738', '0.06106917340175644', '0.0', '0.6378151507241131', '0.07962650810099692', '0.4220678279589185', '10.0', '0.0398622098236262', '0.48409228323113573', '0.17791298120118346']
	#seq3 = ['1.9977001513050117', '0.6697235349256198', '0.8565662982862623', '0.06067307725664917', '0', '0.652890153491342', '0.0689958422973775', '0.38245344199657083', '9.987945556640625', '0.037408992134273254', '0.487184071308488', '0.19358338954633256']
	#seq4 = ['1.9555225546074817', '0.6857900673277272', '0.8345847007926176', '0.06253226838312086', '0.0', '0.6539247526746301', '0.05216718327844473', '0.37981827405342244', '9.906207447856003', '0.03236716376467069', '0.49302879668600064', '0.19759473787839776']
	# ave seq = ['1.98729265515', '0.703158836709', '0.869250202287', '0.0616349951706', '0.0', '0.641625925329', '0.0627103969697', '0.354060073647', '9.9788306009', '0.0366441285839', '0.487449597583', '0.181257003966']
	# sig seq = ['0.0336944160905', '0.0355139242913', '0.0329243715608', '0.00166616892557', '0.0', '0.0130185108076', '0.0124699904017', '0.0795101420481', '0.0409317576918', '0.00293120143855', '0.00710341938017', '0.0172418401412']
	
	# L. mon
	#seq0 = ['3.4189921283301516', '0.577189437584448', '1.2459460755020066', '0.17065820764932213', '0.2777099609375', '0.6336954814122963', '0.029754638671875', '1.2292568677760467', '4.727965291193922', '0.2633680385022246', '0.3207810107774632', '0.9818259110316139']
	#seq1 = ['3.2920802834259013', '0.543119823282018', '1.242955864131193', '0.1727466791719636', '0.3188494493901551', '0.6248960677762957', '0.03021240234375', '1.0524037011855503', '4.699095085333077', '0.24527479171395045', '0.3297323872454303', '0.9896814640148437']
	#seq2 = ['2.4095746345960927', '0.4145245847928313', '1.2972319785011033', '0.19311022809254827', '0.328369140625', '0.6384309069860521', '0.066375732421875', '1.009947989123958', '4.9927372363629825', '0.2009843342527302', '0.397160945907845', '0.8971389546800413']
	#seq3 = ['3.2960164946242947', '0.5186310973859275', '1.2594752171296055', '0.18916581902244042', '0.33693071800171265', '0.6409146454144382', '0.029144287109375', '1.0528234701325754', '4.390692313791054', '0.24908696714872314', '0.3559625710426378', '0.9741466056745497']
	#seq4 = ['3.3818701957250323', '0.5422169654462009', '1.2673968915255942', '0.1781729131378005', '0.351494047516072', '0.638165329817482', '0.040283203125', '1.0580056673160971', '4.632989860405003', '0.24549421837411428', '0.3398642589253556', '0.9955752704864504']
	# ave seq = ['3.15970674734', '0.519136381698', '1.26260120536', '0.180770769415', '0.322670663294', '0.635220486281', '0.0391540527344', '1.08048753911', '4.68869595742', '0.240841669998', '0.34870023478', '0.967673641177']
	# sig seq = ['0.422902705543', '0.0620925911001', '0.0217680593941', '0.00995160646951', '0.0278508335345', '0.00633090850717', '0.0158964801914', '0.0853925911428', '0.215638970619', '0.0234804609747', '0.0300770628108', '0.0402497614739']
	
	# D. sec
	#seq0 = ['2.0438784990017447', '1.0560287060421214', '210.7890983816469', '0.11743156810567122', '0.07760330770096055', '1.9845306638985254', '0.06495482223833983', '0', '0.3160407226117135', '0', '0.3993036126038861', '0.0']
	#seq1 = ['2.0325749559161035', '1.0664379845715313', '611192.9615523743', '0.11832533327496408', '0.05068839063167385', '1.8813243844025016', '0.0718864742562528', '0.0', '0.33440704417787054', '0.0', '0.3951507545379722', '0.0']
	#seq2 = ['2.0183059411410817', '1.067322902229319', '14220.209346652147', '0.11861720184876737', '0.034670609776558656', '1.8072645256486806', '0.064776608259805', '0.0', '0.33779400224604794', '0.0', '0.3946702762714774', '0.0']
	#seq3 = ['1.9839347560183853', '1.066709726504551', '44639.82429148629', '0.11658173032229957', '0.026092529296875', '1.5298528921373649', '0.04157197027629749', '0', '0.33559680550062926', '0.0', '0.4290896755371587', '0.0']
	#seq4 = ['2.077610930212397', '1.0965167267694018', '325.376286118757', '0.11780368780236795', '0.07277085833240038', '1.8610529471675283', '0.06477175119520547', '0.0', '0.3141590901573725', '0.0', '0.39951151828160064', '0.0']
	# ave seq = ['2.03126101646', '1.07060320922', '134117.832115', '0.117751904271', '0.0523651391477', '1.81280508265', '0.0615923252452', '0.0', '0.327599532939', '0.0', '0.403545167446', '0.0']
	# sig seq = ['0.0343396662453', '0.0152249404978', '267307.851719', '0.000798774777993', '0.0226909475948', '0.170737419951', '0.0116010657987', '0.0', '0.0114943179495', '0.0', '0.0144569435576', '0.0']
	
	# H. sap chr1
	#
	
	# -0.2083974683360 ['79.21125581766609', '72.9958183534646', '54.53274735285008', '44.479731885292786', '1.106147396060665', '0.5470137617462926', '0.22950818700849585', '0.17689445913010124', '2.047301533506871', '0.5596827732859008', '1.5847795217003278', '0.8453337164475142']
	# -0.0421363951503 ['1.3328378489160855', '0.8400566347145997', '19.177398681640625', '0.13671875', '0.00244140625', '0.8544921875', '0.05859375', '0', '1.47705078125', '0.0', '0.23681640625', '0.0']
	# -0.0419910435492 ['1.371983013148226', '0.8790406323192936', '44.44942035816714', '0.13382739570076302', '0.002380364078772004', '0.8700677993209553', '0.06146578978614494', '0.0', '1.5379746096342508', '0.0', '0.2329708533747217', '0.0']
	# -0.0418034212269 ['1.4070044025229431', '0.908125608528231', '2029.5577691740611', '0.13478014032746496', '0.0022716208549727088', '0.9135699050748948', '0.06213676675841033', '0.0', '1.566962611046245', '0', '0.22321575890323728', '0.0']
	
	
	#return ['3.926041013655336', '6.406145951351974', '38.60106709274283', '27.15165766470892', '0.26413744033645514', '0.380706787109375', '0.5266133844100551', '0.134735107421875', '0.00030517578125', '1.0883718048300612', '0.628387538518785', '2.79541015625', '0.6785565152700108']
	#return ['3.827153795622019', '5.760873449279393', '157.93410847787902', '95.69380310616134', '0.2574279994957082', '0.42812935249900874', '0.5368860874102637', '0.10009765625', '0.000152587890625', '1.0475375129948175', '0.6374749525987066', '2.634980721677287', '0.666523318089256']
	#return ['3.6949768139265062', '6.017728278319943', '1814.035243430071', '989.5510518961266', '0.2612628378396231', '0.329294833203034', '0.5294129763908293', '0.1465434771310286', '0', '1.0712903153864395', '0.7392314182572589', '3.3071090376119034', '0.7917965629306413']
	#return ['3.8582914752646733', '6.283628463478889', '42988.74500371996', '21613.217904266297', '0.263150475967759', '0.28532251545448095', '0.5168052242268224', '0.16531380005047852', '0', '1.0978995427029297', '0.6920115296141625', '3.251719264898766', '0.7597535540679764']
	#return ['3.6823177296872203', '6.015286783264156', '52415.27988324884', '25477.949692624603', '0.24413929541227997', '0.26615432168930975', '0.52011099938147', '0.1836230715923967', '0.0', '1.1221719930561718', '0.674522263158527', '3.229818911831127', '0.7569255994864513']
	#return ['3.1724224779862578', '5.328619906792241', '170531.83171819174', '81169.3576628009', '0.2385873371651559', '0.3528383501459301', '0.5358783431066031', '0.10966798715538192', '0.0', '1.1269503220237047', '0.6613465966647067', '2.8677702245882983', '0.7453035439569574']
	#F = -0.0548600744565
	
	#return ['3.8165496898636064', '5.288752095134875', '19.782319504694826', '14.060861428600145', '0.23393527157755045', '0.300750732421875', '0.519256591796875', '0.122222900390625', '0.00091552734375', '0.991672239831574', '0.45657229828439466', '1.7500679260443912', '0.44617173788616754']
	#return ['3.5292021756231926', '5.495471883886089', '315.6550881586098', '151.38167276262732', '0.21648250432181426', '0.3546142578125', '0.5065650378223892', '0.08880615234375', '0', '1.1168105191108715', '0.45587646094471734', '2.04434139522596', '0.5086497522369002']
	#return ['3.3118984084814613', '5.705402068161347', '3034.369294678181', '1482.884660898002', '0.20657397033675967', '0.2951886961118404', '0.49430119545222195', '0.11196374602835801', '0.0', '1.0735420731614118', '0.5342034555586413', '2.6294754752012035', '0.5734313243015254']
	#return ['3.229903167666385', '5.621022485083288', '5100.189656198509', '2345.9859764922194', '0.20288601768576078', '0.3360056023243166', '0.49349794748259546', '0.07954696498105908', '0.0', '1.1045227342906685', '0.5345365653430841', '2.6816303285032173', '0.5903727361352366']
	#return ['5.88318059814761', '3.319136692176075', '16.91449674292926', '41.4889477083625', '0.17577929253456437', '0.2428158455605961', '0.45407929482965115', '0.002899169921875', '0.00244140625', '1.1370578193850314', '0', '0.5096971924822791', '0.0']
	#return ['5.974554296379933', '3.357331797822591', '29.295144411688497', '49.125659340848756', '0.17262905096070078', '0.23835668892394546', '0.46095755381568415', '0.0', '0.000762939453125', '1.1112070620487267', '0.0', '0.6186245273960493', '0.0']
	#return ['6.231905029853938', '3.2248761377625312', '49.01658447554046', '31.79745881653659', '0.17946536959770032', '0.24650158493427907', '0.464962453393767', '0', '0.0007411951887385586', '1.0941379475527924', '0.0006103515625', '0.5403003051712375', '0.0']
	#return ['5.995850217742341', '3.1042769631146205', '51.65103383699336', '30.155555517825245', '0.16403087241818956', '0.23257114065744633', '0.47548867685991164', '0.0', '0.0', '1.056522892425861', '0.000626519822502793', '0.5381333707174729', '0.0']
	
	
	# Dataset all
	
	#return ['3.606681804479088', '4.981925968559722', '23.47666433606976', '0.235595703125', '0.28076171875', '0.540275997484805', '0.16448974609375', '0.0006103515625', '1.0277161374072015', '0.6067078148074915', '2.2229305160668673', '0.6189670523687845']
	#return ['3.8681972881832096', '5.007219383892147', '97.2785546694247', '0.22590007244202517', '0.38848876953125', '0.5237299739813001', '0.0799560546875', '0.000152587890625', '0.9583229898576404', '0.5990797551992498', '2.2152690660506718', '0.5728812039148382']
	#return ['3.8089114822750614', '4.799068109511174', '2569.737132653236', '0.22297151893998346', '0.36864848990391064', '0.5270698668415974', '0.08646210731915309', '0.0', '0.9536578501571213', '0.592727159665536', '2.145203068956624', '0.565212676078069']
	#return ['3.9607522236997634', '5.134748844583944', '1633.3587031487932', '0.21854341190986365', '0.38213499977790666', '0.5102879451912632', '0.06944736135346041', '0', '0.9486787903011399', '0.6113143343767292', '2.3533009725875638', '0.5798648229493961']
	#F = -0.055553724061
	
	#E. coli K-12 MG1655
	
	#Dataset 0
	
	#return ['3.3869701961000933', '5.295961140257269', '31.508519508857745', '0.25299072265625', '0.384063720703125', '0.5531593591828903', '0.11810302734375', '0.000457763671875', '1.1225106739857758', '0.7060198435539751', '2.923583984375', '0.7888758366298669']
	#return ['3.851366338493232', '5.337200431345728', '87.85031936003489', '0.23829639942507977', '0.28972938507533824', '0.5211720489572224', '0.128936767578125', '0.000152587890625', '0.9929629839328955', '0.6771621896554153', '2.715954427296305', '0.6707854454385721']
	#return ['3.7247097145140797', '5.325226951661035', '281.06017334745627', '0.24536744159381899', '0.34201401248582847', '0.5318487955176345', '0.11293552201566312', '0.000152587890625', '1.028833583688022', '0.6824873367004131', '2.7955689323873125', '0.7016890720810607']
	#return ['3.6976345284405636', '5.1689817208699855', '1016.6907452917089', '0.2437157382442108', '0.332825185315349', '0.5407054653029927', '0.12896819633301665', '0', '1.0187147826707619', '0.6819201167140697', '2.70905102240629', '0.6945486800970654']
	#return ['3.6377483480163115', '5.135942369041777', '1731.059770667136', '0.23700229405919337', '0.3867200693253693', '0.5360032625104594', '0.08961661107803884', '0', '1.0332662423751902', '0.6576260214880403', '2.654586372554576', '0.6794295421776296']
	#F = -0.0563207184641
	
	#return ['3.4145451777428804', '5.578116121385854', '39.176747630859865', '0.264129638671875', '0.291748046875', '0.552978515625', '0.187835693359375', '0.00030517578125', '1.14609045117163', '0.7368114416682263', '3.19183349609375', '0.8415505247162001']
	#return ['3.8739700820458456', '5.512719309576789', '336.60328065550374', '0.2517049737293438', '0.27766460030212725', '0.5366251894098054', '0.175628662109375', '0.0', '0.9912677246184729', '0.7280664143473271', '2.8338025105684603', '0.7212521427720829']
	#return ['3.9021795869330997', '5.629420552032267', '206.83921215644762', '0.24565652762919005', '0.34866750654852996', '0.5231793502428612', '0.11186486636915119', '0.000152587890625', '1.013247652162774', '0.6983082060273141', '2.93109550507449', '0.7068672201990253']
	#return ['3.841810637397746', '5.500219610826229', '151.245985291821', '0.24241597876733983', '0.4068517759229805', '0.5282392100388085', '0.08385436556475029', '0.000152587890625', '1.0153204915019372', '0.6744400145621052', '2.837356844519187', '0.6838711830844727']
	#return ['3.719832766970141', '5.373875022859028', '558.2595165162645', '0.2406026216041511', '0.33773760986818435', '0.5301043765586777', '0.11892653083974777', '0', '1.0370213903520322', '0.6682333935001467', '2.792044629938306', '0.6927409078537308']
	#F = -0.0563468118456
	
	#seq0 = ['3.9194008002207488', '5.091612549383615', '279.60785164392246', '0.21414769915882284', '0.37509188388867387', '0.5056199439483651', '0.05309792069922559', '0', '0.9438929447289315', '0.6114143849109202', '2.381796112926775', '0.5766296280336604']
	
	# Dataset 1
	
	#return ['3.0175627569069903', '4.603590629723627', '29.616767617292126', '0.19657039427543843', '0.343475341796875', '0.514373779296875', '0.072021484375', '0.000457763671875', '1.1903455950888118', '0.5041531344202826', '1.957960253222173', '0.5980721335272222']
	#return ['3.157066597139634', '4.720361341733433', '250.55195535953146', '0.19814669447290553', '0.3726710731655041', '0.509661732411881', '0.05860584256935325', '0.0', '1.151046002312979', '0.5175540417578985', '2.035791710450735', '0.5954499654878108']
	#return ['3.282176843434194', '4.743323722804983', '346.8919797593123', '0.20994336518035625', '0.3614473477606424', '0.5204515214269159', '0.08298264116944806', '0', '1.0945367594907127', '0.5402400008000102', '2.059577319113009', '0.5910779523182913']
	#return ['3.302401073035717', '4.612267216539194', '314.856791484894', '0.2141548252052807', '0.31620248457237365', '0.5285703767024423', '0.114898681640625', '0', '1.0653245220096195', '0.5572635437085585', '2.061388468308194', '0.5933842714657358']
	#return ['3.3685237077121695', '4.685363072060382', '1713.8544235716495', '0.20690041632589287', '0.34537467848138426', '0.5163535443296107', '0.08309888767897', '0', '1.0546726041808656', '0.5471541597977325', '2.0741429245156544', '0.5770160973221947']
	#return ['3.4609425340280247', '4.586300904457399', '192.77645318892974', '0.21462198194281346', '0.32513444100335326', '0.5259210124851135', '0.10377240171626022', '0.000152587890625', '1.0073729091941528', '0.5676819449544039', '2.067026354372554', '0.571341110393897']
	#F = -0.0549599931158
	
	#seq1 = ['3.9108693099906042', '5.347719178489706', '770.5417558089673', '0.21748821717184305', '0.33208014256253593', '0.4995115679758303', '0.09928292409309249', '0', '0.964165820010138', '0.581754441573954', '2.3126454473483546', '0.5607589908475759']
	
	# Dataset 2
	
	#return ['3.0759216308593746', '3.6035705566406246', '12.508312077916433', '0.195770263671875', '0.355377197265625', '0.54595947265625', '0.051116943359375', '0.001220703125', '0.9842834662513904', '0.45553742576852585', '1.518707275390625', '0.44219970703125']
	#return ['3.2490257181175233', '3.9035880536433245', '31.149397384415312', '0.19112062146080222', '0.363062076941306', '0.5263061945750784', '0.041961669921875', '0.000457763671875', '0.9398011927296209', '0.4730336010876842', '1.610905778622924', '0.44177882164843923']
	#return ['3.735075146357782', '4.477135033661435', '263.66912621019236', '0.17158275776490958', '0.269775390625', '0.4711312553224277', '0.05059344901329972', '0', '0.928374671801406', '0.4653979390231296', '1.7480345941061153', '0.4317231738500835']
	#return ['3.729666843176947', '4.327653590681037', '350.3857185369743', '0.17098278625914973', '0.3132831659429287', '0.47445367410627265', '0.023328243343847282', '0', '0.9476046077157738', '0.4628862421156436', '1.704009766741643', '0.43838121882719105']
	#return ['3.8171519785446932', '4.300208489662132', '1926.3073700602954', '0.17400911151520773', '0.28882126951322196', '0.4777037602366412', '0.039525147406623065', '0.0', '0.9166764728677962', '0.473063929385987', '1.7038619337369534', '0.4335977072164881']
	#F = -0.0560258486404
	
	#seq2 = ['4.04556556729043', '5.19343358146431', '522.7812412064513', '0.20750880365818514', '0.3391510622003565', '0.4930337921004774', '0.0727152810254422', '0.0', '0.9610839617462045', '0.6057979259375152', '2.3402478322707947', '0.5819992536165142']
	
	# Dataset 3
	
	#return ['3.952051414762053', '5.463283373062492', '107.48996244027336', '0.226593017578125', '0.324554443359375', '0.5212632327525815', '0.14388414284490036', '0.000152587890625', '1.0017130592242909', '0.3369140625', '1.39434814453125', '0.3369140625']
	#return ['3.956511501460449', '5.109973390887154', '54.0373789828342', '0.20081886224799214', '0.28823774037584415', '0.5001610088096822', '0.1125698287356467', '0.00030517578125', '0.9535789915341438', '0.352463631909653', '1.4472091835110936', '0.3348151047388237']
	#return ['3.873609481194733', '4.876221154773536', '281.32835168211454', '0.18937323355948277', '0.346102848067059', '0.4934531602200416', '0.05780000486009676', '0.0', '0.9235423304871266', '0.3577386199788838', '1.4670533560066774', '0.3301279917714506']
	#return ['3.725350740548754', '4.675795776072078', '131.99364446805237', '0.1776499782253642', '0.2809707011601917', '0.48595689794533614', '0.07112823267611801', '0.000152587890625', '0.9015811567486577', '0.37526109876174013', '1.5371793852264073', '0.33775489546720217']
	#return ['3.6407970047749383', '4.449327480466303', '158.19354616374764', '0.16700503483825682', '0.29483412284220395', '0.4787737486587274', '0.039692797108145036', '0.00014843906297582195', '0.8804904405904246', '0.3746810447486099', '1.5363387576123524', '0.32942153725284423']
	#return ['3.638186627954956', '4.320347281278324', '847.9091747963962', '0.1623273487316937', '0.30799440279944673', '0.47546746934210105', '0.0213623046875', '0.0', '0.8693890696214349', '0.37591389526419944', '1.5268680641637518', '0.3267244834140588']
	#F = -0.055411693672
	
	#seq3 = ['4.005901096609766', '5.175030916189174', '136595.80401839083', '0.21433081411313343', '0.3387718689825965', '0.5140954356306868', '0.09468850226784468', '0.0', '0.9515081372847849', '0.5809228065697261', '2.297836615839675', '0.5527519720114225']
	
	# Dataset 4
	
	#return ['3.2507582667401778', '3.330255950875973', '81.87530394600665', '0.125579833984375', '0.21087646484375', '0.43785412886464004', '0.0', '0.000152587890625', '0.8718896319041871', '0.06178837409249405', '0.712890625', '0.0533973973366747']
	#return ['3.1310121288215607', '3.5234059246652496', '26.629326116768198', '0.13166258843625342', '0.22749974908536513', '0.44684825352639107', '0.0006103515625', '0.0006090707734210455', '0.9748791755444695', '0.1777593001779161', '1.041788211392875', '0.17165596783796042']
	#return ['3.305708715899298', '4.106615401198216', '158.74087509747676', '0.1532134909860259', '0.2405253857688777', '0.4619048235888907', '0.045623779296875', '0.000152587890625', '1.0047688093738525', '0.3305986628165537', '1.3845733729735925', '0.33178407595512216']
	#return ['3.4120915712960156', '4.104186621818465', '91.43937578153106', '0.15765532900276963', '0.28168601435431806', '0.4664243243586033', '0.0274658203125', '0.00014567730225100405', '0.959712826976638', '0.3444332524983423', '1.3587843687187104', '0.3298080866582006']
	#return ['3.369845704560535', '4.072520949572141', '492.13898695017065', '0.15511344636360827', '0.28106804893280035', '0.46440750763218036', '0.02288818359375', '0', '0.920993007794707', '0.360820300790275', '1.4131009190226205', '0.33216432189834827']
	#return ['3.5130696202780523', '3.9769940153011945', '534.3137471266809', '0.15748899749313164', '0.27949492523691116', '0.4674140726189066', '0.023255494021542023', '0.0', '0.8980553649368384', '0.36830076565276726', '1.3910716099785791', '0.3306084770379547']
	#return ['3.4645893001683383', '3.9073655448972784', '320.6832494494524', '0.15324164413158683', '0.2802012648138422', '0.4637750975373213', '0.0140380859375', '0', '0.8798079923046644', '0.35779175313748274', '1.364236500754764', '0.31454884687166157']
	#return ['3.5257092547914453', '3.906814515683904', '7959.414864796218', '0.15562129240796121', '0.23797287493450553', '0.4660953719145892', '0.04180908203125', '0', '0.8635600391134086', '0.36747747987700774', '1.3770547242912834', '0.31732878494030065']
	#return ['3.460981213516381', '3.935553376360259', '140947.6832099275', '0.1547567117215452', '0.2613612576307666', '0.4656363042669355', '0.02899169921875', '0.0', '0.8466551405982214', '0.361153747449484', '1.3739934396013103', '0.3057721166882891']
	#F = -0.0549553962386
	
	#seq4 = ['3.9004934225020698', '5.166080764906655', '3534.2626064783226', '0.21687098415678155', '0.31690646723021165', '0.5059881098858009', '0.10958006053961508', '0', '0.9545195962909524', '0.6152602673343528', '2.324822135568328', '0.5872426013909633']
	#F = -0.055711272073125637
	
	#H. sapiens chromosome 1
	
	#Dataset 0
	#return ['1.37960205078125', '0.17904052734374998', '7.748857062290284', '0.1123046875', '0.0', '0.693511962890625', '0.01953125', '0.0018310546875', '1.270904541015625', '0.0042724609375', '0.050201416015625', '0.0042724609375']
	#return ['1.3793225102499447', '0.18672887321418222', '7.428431721753739', '0.1164382557715681', '0.0', '0.6768079642610186', '0.017993554573696786', '0.0018310546875', '1.0058632488208152', '0.0043386504537851235', '0.0', '0.004108029654336777']
	#return ['1.3121877535040662', '0.18474855872689647', '8.140651938014166', '0.12187891661256081', '0', '0.659154623246554', '0.017335183394985205', '0.001681877831262546', '0.9760664286647951', '0.0036115650709526584', '0.0250244140625', '0.0031091138164961946']
	#return ['1.2968259205851973', '0.19224206068362476', '8.255069995131903', '0.12476896338405621', '0.0', '0.6365414329839542', '0.01699779136297308', '0.0016242996034756833', '0.9928835977405107', '0.003472733038152769', '0.02513298122512887', '0.003136251883035476']
	#return ['1.2968259205851973', '0.19224206068362476', '8.255069995131903', '0.12476896338405621', '0.0', '0.6365414329839542', '0.01699779136297308', '0.0016242996034756833', '0.9928835977405107', '0.003472733038152769', '0.02513298122512887', '0.003136251883035476']
	#seq0 = ['1.2968259205851973', '0.19224206068362476', '8.255069995131903', '0.12476896338405621', '0.0', '0.6365414329839542', '0.01699779136297308', '0.0016242996034756833', '0.9928835977405107', '0.003472733038152769', '0.02513298122512887', '0.003136251883035476']
	#F = -0.0549150393762
	
	#Dataset 1
	#return ['1.3997854918283394', '0.946267764188164', '67.78762817382812', '0.154266357421875', '0', '0.6597900390625', '0.00030517578125', '0.000152587890625', '0.75653076171875', '0', '0.294036865234375', '0.0']
	#return ['1.3443906539041313', '0.9614999374328259', '54.658817784833616', '0.22787523156485148', '0', '0.6791179959963676', '0.0006103515625', '0.0001489336003459615', '0.7662801307346828', '0.0', '0.286453971017196', '0.0']
	#return ['1.3233112694935254', '0.9518366567061252', '50.228884574212415', '0.24462512112946047', '0.0', '0.6716614160554728', '0.0012467379372215483', '0.0001525166186656423', '0.7642225878140634', '0.0', '0.29671369987306073', '0.0']
	#return ['1.3233112694935254', '0.9518366567061252', '50.228884574212415', '0.24462512112946047', '0.0', '0.6716614160554728', '0.0012467379372215483', '0.0001525166186656423', '0.7642225878140634', '0.0', '0.29671369987306073', '0.0']
	#return ['1.3233112694935254', '0.9518366567061252', '50.228884574212415', '0.24462512112946047', '0.0', '0.6716614160554728', '0.0012467379372215483', '0.0001525166186656423', '0.7642225878140634', '0.0', '0.29671369987306073', '0.0']
	#seq1 = ['1.3233112694935254', '0.9518366567061252', '50.228884574212415', '0.24462512112946047', '0.0', '0.6716614160554728', '0.0012467379372215483', '0.0001525166186656423', '0.7642225878140634', '0.0', '0.29671369987306073', '0.0']
	#F = -0.0561125217113
	
	#Dataset 2
	#return ['1.5128694849308246', '1.1177617432579154', '312500.2722167969', '0.240478515625', '0.0', '0.8093615491424022', '0.0', '0.0', '0.941515212624623', '0.0', '0.46875', '0.0']
	#return ['1.4399509181099726', '0.9904393085164371', '36.16171172371833', '0.23273262848101128', '0.0', '0.808623362165683', '0.0', '0.000152587890625', '0.7872937472177632', '0.0', '0.43699947664223643', '0.0']
	#return ['1.4350929333120637', '1.0357409021556414', '35.146372405839955', '0.2373401130655693', '0.0', '0.796886326413652', '0.0', '0.00014776918161800556', '0.95860549903', '0.0', '0.41893911567493375', '0.0']
	#return ['1.414107597165406', '0.9857661335587202', '43.069862628219234', '0.23432652424381925', '0.0', '0.7814008959784607', '0.0', '0.000152587890625', '0.8108341980587873', '0.0', '0.4002068474500487', '0.0']
	#return ['1.414107597165406', '0.9857661335587202', '43.069862628219234', '0.23432652424381925', '0.0', '0.7814008959784607', '0.0', '0.000152587890625', '0.8108341980587873', '0.0', '0.4002068474500487', '0.0']
	#seq2 = ['1.414107597165406', '0.9857661335587202', '43.069862628219234', '0.23432652424381925', '0.0', '0.7814008959784607', '0.0', '0.000152587890625', '0.8108341980587873', '0.0', '0.4002068474500487', '0.0']
	#F = -0.0561259279118
	
	#Dataset 3
	#return ['1.4199564629554828', '0.9415597466088421', '999999.9951171875', '0.21484375', '0.0', '0.85418701171875', '0.0', '0.0', '0.82489013671875', '0.0', '0.4443359375', '0.0']
	#return ['1.4377929829221996', '1.0644967438265698', '999753.3560180664', '0.23364057549652134', '0.0', '0.7234348111278508', '0.0', '0.0', '0.8248813960889066', '0.0', '0.3382685699818719', '0.0']
	#return ['1.442438524786345', '1.087418461349433', '999867.9284667969', '0.2411165568740317', '0', '0.7112252511413888', '0.0', '0.0', '0.8260389161430063', '0.0', '0.32814171215358284', '0.0']
	#return ['1.442438524786345', '1.087418461349433', '999867.9284667969', '0.2411165568740317', '0', '0.7112252511413888', '0.0', '0.0', '0.8260389161430063', '0.0', '0.32814171215358284', '0.0']
	#return ['1.4528496717122241', '1.0990616134079785', '8337.002138409065', '0.23739548856275156', '0.0', '0.7063627464531174', '0.0', '0.0', '0.824331044883431', '0.0', '0.32952635612435954', '0.0']
	#seq3 = ['1.4528496717122241', '1.0990616134079785', '8337.002138409065', '0.23739548856275156', '0.0', '0.7063627464531174', '0.0', '0.0', '0.824331044883431', '0.0', '0.32952635612435954', '0.0']
	#F = -0.0566557956529
	
	#Dataset 4
	#return ['1.163079833984375', '0.218408203125', '1.7249864562387245', '0.141754150390625', '0.0', '0.6446403242314609', '0.076446533203125', '0.008087158203125', '0.3796656699036711', '0.009765625', '0.018768310546875', '0.0']
	#return ['1.1962210320469', '0.2421937891688644', '2.129972230119315', '0.17785353529913164', '0.0', '0.6510132529089967', '0.054955385033522375', '0.00579833984375', '0.36740122286732674', '0.009807042349734653', '0.0', '0.0']
	#return ['1.2070794344136702', '0.2599144904557741', '2.2908720180348703', '0.18506954920582233', '0.0', '0.6603437494866103', '0.048580059098165256', '0.005159381591133605', '0.3727528889046415', '0.009321619228408884', '0.000152587890625', '0.0']
	#return ['1.2280716331263657', '0.2574795064751415', '2.4750562729972154', '0.18340802838507206', '0.0', '0.6674142279993849', '0.046398992270965965', '0.004767901910673583', '0.3556048610825122', '0.008955705193772109', '0', '0.0']
	#return ['1.2267141782395063', '0.2581609501611823', '2.5816575905246837', '0.18092110710512807', '0', '0.6636593690748255', '0.04452715338038389', '0.004533688601994105', '0.35507168364819464', '0.00854772010730582', '0.0', '0.0']
	#seq4 = ['1.2267141782395063', '0.2581609501611823', '2.5816575905246837', '0.18092110710512807', '0', '0.6636593690748255', '0.04452715338038389', '0.004533688601994105', '0.35507168364819464', '0.00854772010730582', '0.0', '0.0']
	#F = -0.0520150296464
	
	# ave seq = ['1.34276172744', '0.697413482904', '1688.22752264', '0.204407440885', '0.0', '0.691925172109', '0.0125543365361', '0.00129261854295', '0.749468622429', '0.00240409062909', '0.210315976935', '0.000627250376607']
	# sig seq = ['0.0910563574691', '0.435126584052', '3716.83657765', '0.0512218693918', '0.0', '0.0558822035735', '0.0192684316017', '0.00192904849843', '0.2368478368', '0.00374917107581', '0.184566909138', '0.00140257448101']
	
	
	#D. melanogaster
	
	#Dataset 0
	#return ['1.3768676039665309', '0.7580571020659406', '96.37542724609375', '0.175018310546875', '0.079193115234375', '1.0657255916741268', '0.118408203125', '0.0', '1.3883867244570176', '0.0', '0.257415771484375', '0.0']
	#return ['1.3768676039665309', '0.7580571020659406', '96.37542724609375', '0.175018310546875', '0.079193115234375', '1.0657255916741268', '0.118408203125', '0.0', '1.3883867244570176', '0.0', '0.257415771484375', '0.0']
	#return ['1.3768676039665309', '0.7580571020659406', '96.37542724609375', '0.175018310546875', '0.079193115234375', '1.0657255916741268', '0.118408203125', '0.0', '1.3883867244570176', '0.0', '0.257415771484375', '0.0']
	#return ['1.3635308345406876', '0.7470176459544475', '152.5128315652728', '0.17469759321371534', '0.08008238761663385', '1.060426418383897', '0.11693508075228266', '0.0', '1.4050180839157562', '0.0', '0.2597962192915568', '0.0']
	#return ['1.3845857889866624', '0.7657633756267995', '307.13980067751163', '0.17230957380023137', '0.0788729519125245', '1.0665008554126671', '0.11827789579351161', '0', '1.3785886914739558', '0.0', '0.2545210810283115', '0.0']
	#F = -0.0404630010792
	
	#Dataset 1
	#return ['1.4281249999999996', '0.8031249999999996', '24834.51934814453', '0.11749267578125', '0.000152587890625', '0.9650500736241412', '0.038909912109375', '0.0', '0.6550527556647101', '0.0', '0.234375', '0.0']
	#return ['1.392548503333461', '0.6990170791157309', '16.033854190962302', '0.17659901196531946', '0.085906982421875', '1.1625846830075002', '0.118560791015625', '0', '1.0951695565544521', '0.0', '0.268984928860541', '0.0']
	#return ['1.3758119455426157', '0.6645329480979518', '18.929651839817943', '0.17809885091778394', '0.1265638563296512', '1.1644455430956968', '0.11936667972616898', '0.000152587890625', '1.088192619226513', '0.0', '0.2760535227357843', '0.0']
	#return ['1.3769648267611063', '0.6015104500498554', '20.450615772888185', '0.18941389755987456', '0.1741107926772805', '1.1706206016854075', '0.11876210995198037', '0.0003068122444136988', '0.9007992994779881', '0.0', '0.29558284186569933', '0.0']
	#return ['1.3769555166733003', '0.630234998450888', '37.68119794053436', '0.19545095310933977', '0.16564348957594696', '1.1708752461220246', '0.11799248939410913', '0.00014391579366995088', '1.0272671447587918', '0.0', '0.2832987712831182', '0.0']
	#F = -0.039672338794
	
	#Dataset 2
	#return ['1.3730407714843746', '0.7529235839843746', '110.90805053710938', '0.1751708984375', '0.087432861328125', '1.0597012039524933', '0.11688232421875', '0', '1.378742892708982', '0.0', '0.256195068359375', '0.0']
	#return ['1.41148970859982', '0.7426391974517149', '220.22243674138736', '0.17855565391194345', '0.09583645416090308', '1.1588933597967594', '0.13682639276157563', '0.0', '1.3102977492421723', '0.0', '0.2556945956038194', '0']
	#return ['1.41148970859982', '0.7426391974517149', '220.22243674138736', '0.17855565391194345', '0.09583645416090308', '1.1588933597967594', '0.13682639276157563', '0.0', '1.3102977492421723', '0.0', '0.2556945956038194', '0']
	#return ['1.41148970859982', '0.7426391974517149', '220.22243674138736', '0.17855565391194345', '0.09583645416090308', '1.1588933597967594', '0.13682639276157563', '0.0', '1.3102977492421723', '0.0', '0.2556945956038194', '0']
	#return ['1.41148970859982', '0.7426391974517149', '220.22243674138736', '0.17855565391194345', '0.09583645416090308', '1.1588933597967594', '0.13682639276157563', '0.0', '1.3102977492421723', '0.0', '0.2556945956038194', '0']
	#F = -0.0400844157303
	
	#Dataset 3
	#return ['1.3649536132812496', '0.6453892267042001', '19.71923828125', '0.17181396484375', '0.1254450849478972', '1.1636502605774464', '0.13671875', '0.000152587890625', '1.0654080946009743', '0.0', '0.25238037109375', '0.0']
	#return ['1.3748555926255492', '0.6896636764189484', '23.435180466215577', '0.1846781416987476', '0.15313861509306242', '1.1615391256393461', '0.13874552236733592', '0.0001452398568489726', '1.3729317877696605', '0.0', '0.26890252042200047', '0.0']
	#return ['1.3748555926255492', '0.6896636764189484', '23.435180466215577', '0.1846781416987476', '0.15313861509306242', '1.1615391256393461', '0.13874552236733592', '0.0001452398568489726', '1.3729317877696605', '0.0', '0.26890252042200047', '0.0']
	#return ['1.3748555926255492', '0.6896636764189484', '23.435180466215577', '0.1846781416987476', '0.15313861509306242', '1.1615391256393461', '0.13874552236733592', '0.0001452398568489726', '1.3729317877696605', '0.0', '0.26890252042200047', '0.0']
	#return ['1.3688829888988154', '0.6723524012405778', '20.042999195404516', '0.1936278376047707', '0.15697425463941725', '1.1753572480199719', '0.13275826749447922', '0.000152587890625', '1.348647231888921', '0', '0.287630537626953', '0.0']
	#F = -0.0398428102785
	
	#Dataset 4
	#return ['1.5903259277343746', '0.6880737304687496', '242.652587890625', '0.194854736328125', '0.156402587890625', '1.2548897549198146', '0.174407958984375', '0.0', '0.6125504248759501', '0.0', '0.26336669921875', '0.0']
	#return ['1.5848991819149372', '0.6561964673424422', '28.85170188939307', '0.20429756931886134', '0.1869347513235224', '1.295837409589319', '0.17404423341363273', '0.000152587890625', '0.6317799518967381', '0.0', '0.27107249344584217', '0.0']
	#return ['1.5293014248534855', '0.678611429706437', '29.40092258039268', '0.21392644385884052', '0.20603755501437016', '1.4151312146325035', '0.2106286213560177', '0.000152587890625', '1.155451093883586', '0', '0.31638334953041564', '0.0']
	#return ['1.5370469050767392', '0.6802720047621634', '31.213329883788674', '0.2204485957472127', '0.2153563240725503', '1.3721933815821368', '0.21513734098717865', '0.0001540924271195324', '1.134504669055831', '0.0', '0.3159324670809959', '0.0']
	#return ['1.5087180172465002', '0.6514909182893036', '37.1189240273171', '0.21224449078582242', '0.2151235416363889', '1.4101620558767747', '0.21881494561225653', '0.00014787688089747908', '1.1442572854639896', '0', '0.3031660348662352', '0.0']
	#F = -0.0398610371756
		
	#seq0 = ['1.3845857889866624', '0.7657633756267995', '307.13980067751163', '0.17230957380023137', '0.0788729519125245', '1.0665008554126671', '0.11827789579351161', '0', '1.3785886914739558', '0.0', '0.2545210810283115', '0.0']
	#seq1 = ['1.3769555166733003', '0.630234998450888', '37.68119794053436', '0.19545095310933977', '0.16564348957594696', '1.1708752461220246', '0.11799248939410913', '0.00014391579366995088', '1.0272671447587918', '0.0', '0.2832987712831182', '0.0']
	#seq2 = ['1.41148970859982', '0.7426391974517149', '220.22243674138736', '0.17855565391194345', '0.09583645416090308', '1.1588933597967594', '0.13682639276157563', '0.0', '1.3102977492421723', '0.0', '0.2556945956038194', '0']
	#seq3 = ['1.3688829888988154', '0.6723524012405778', '20.042999195404516', '0.1936278376047707', '0.15697425463941725', '1.1753572480199719', '0.13275826749447922', '0.000152587890625', '1.348647231888921', '0', '0.287630537626953', '0.0']
	#seq4 = ['1.5087180172465002', '0.6514909182893036', '37.1189240273171', '0.21224449078582242', '0.2151235416363889', '1.4101620558767747', '0.21881494561225653', '0.00014787688089747908', '1.1442572854639896', '0', '0.3031660348662352', '0.0']
	
	# ave seq = ['1.41012640408', '0.692496178212', '124.441071716', '0.190437701842', '0.142490138385', '1.19635775305', '0.144933998211', '8.88761130385e-05', '1.24181162057', '0.0', '0.276862204082', '0.0']
	# sig seq = ['0.057392976209', '0.0588346458151', '130.962099642', '0.0156577280265', '0.0553289960809', '0.127543182789', '0.0421567573674', '8.1190477571e-05', '0.150298324334', '0.0', '0.0211924004456', '0.0']
	
	
	#C. elegans
	
	#Dataset 0
	#return ['2.6467169767030256', '1.0379577636718746', '0.8376106488345414', '0.666656494140625', '0.190277099609375', '0.37109375', '0.0', '0.05126953125', '0.8866041407619951', '0.109405517578125', '0.09613037109375', '0.006103515625']
	#return ['2.542155448814495', '0.9849354626676581', '0.7627741636274935', '0.6669694322729179', '0.1939903345976088', '0.3540741048146473', '0.0', '0.073394775390625', '0.8407829739946773', '0.11403385592871215', '0.10111087585490178', '0.0']
	#return ['2.5835565982806785', '0.9759769229822974', '0.7469593157221928', '0.6917793577994893', '0.19146597781912686', '0.35839272378739445', '0.001373291015625', '0.07482058008435659', '0.828052342791291', '0.11971445313995825', '0.10653485020095256', '0.0']
	#return ['2.5445150951118207', '0.9569455617398899', '0.7270362498518759', '0.6795134400160678', '0.18244927551449702', '0.3533305682272542', '0.00091552734375', '0.07567362554579467', '0.8319452192683179', '0.12358678994670377', '0.105133056640625', '0.0']
	#return ['2.551303203472202', '0.9326967700505726', '0.7072507037965191', '0.662702691080292', '0.18523523624312999', '0.35678250655354404', '0.00091552734375', '0.08021097949732506', '0.8224432662565422', '0.12961157316036442', '0.10216584272264491', '0.0']
	#F = -0.0785333354105
	
	#Dataset 1
	#return ['4.325516811787281', '1.4638810811275889', '1.237895913893471', '1.96678532901673', '0.3867307807291387', '0.5758247817000299', '0.173187255859375', '0.059661865234375', '0.9677558771950023', '0.0769637709369766', '0.09939115614810112', '0.0']
	#return ['4.265954650929033', '1.5965002096985164', '1.3660072715544833', '1.9737789419864353', '0.40060978124433005', '0.5772145525850082', '0.17892973545012167', '0.043532531687707474', '0.9908277850697689', '0.0553373896570436', '0.1008243748690573', '0.0']
	#return ['4.418729758927918', '1.6930976518865475', '1.3572046282907566', '2.057451334486618', '0.38463756803528903', '0.5942558997655216', '0.19150866306575864', '0.038564598292372965', '0.9959184858024115', '0.056909109688758175', '0.107879638671875', '0']
	#return ['4.4062613918870035', '1.6605527391230257', '1.3540394957549386', '2.0289942939995997', '0.37245427121847485', '0.5987218941993848', '0.19800520652123224', '0.03949993362534994', '0.9670440548808644', '0.0554438868785005', '0.1043042304793666', '0.0']
	#return ['4.600584818087631', '1.7855703880886207', '1.4051233583586975', '2.1040825600047843', '0.3731458591263525', '0.6103265978376536', '0.2009057131199088', '0.031500854971974135', '0.9791152915477169', '0.05568885327140842', '0.10839636502740022', '0.0']
	#F = -0.0772249691791
	
	#return ['2.599030477156532', '0.9849231108010343', '0.6971814985784106', '0.719757080078125', '0.196075439453125', '0.360107421875', '0.003662109375', '0.06805419921875', '0.8417384062820492', '0.13038722744252462', '0.1129150390625', '0.0']
	#return ['2.527924246765096', '0.9257639175605104', '0.6891589363913562', '0.6835637396994564', '0.1914394826994863', '0.3581302323594918', '0.0067138671875', '0.08087158203125', '0.8354422993045508', '0.12965121086945183', '0.10671798082511406', '0.0']
	#return ['2.5011443818960077', '0.895616132292263', '0.673564893497759', '0.6556911328038634', '0.1873779296875', '0.35400118843665596', '0.00244140625', '0.08538516981239197', '0.8211278680403534', '0.1333978305681102', '0.10247454970113998', '0.0']
	
	#Dataset 2
	#return ['2.4035758047543467', '0.8736105437553512', '0.62984079409879', '0.671844482421875', '0.1568603515625', '0.33599853515625', '0.0006103515625', '0.088653564453125', '0.855161936605916', '0.14434814453125', '0.10955810546875', '0.00091552734375']
	#return ['2.495700003783975', '0.8603165459336203', '0.6765659823120439', '0.6447691964641743', '0.18720771849847578', '0.353864937519901', '0.004425048828125', '0.0848388671875', '0.813198136707702', '0.13648380786738784', '0.098876953125', '0.000152587890625']
	#return ['2.4833430760851742', '0.8631683123743489', '0.6851096940447691', '0.6340881996296011', '0.18106563453855995', '0.34798195326334397', '0.0', '0.08118885456766878', '0.8080130234963561', '0.13431944129241521', '0.0969013079655288', '0.0003018437757834963']
	#return ['2.4833430760851742', '0.8631683123743489', '0.6851096940447691', '0.6340881996296011', '0.18106563453855995', '0.34798195326334397', '0.0', '0.08118885456766878', '0.8080130234963561', '0.13431944129241521', '0.0969013079655288', '0.0003018437757834963']
	#return ['2.4833430760851742', '0.8631683123743489', '0.6851096940447691', '0.6340881996296011', '0.18106563453855995', '0.34798195326334397', '0.0', '0.08118885456766878', '0.8080130234963561', '0.13431944129241521', '0.0969013079655288', '0.0003018437757834963']
	#F = -0.0784566036258
	
	#Dataset 3
	#return ['2.2461859027971087', '0.7436774058646023', '0.5909528346719277', '0.65826416015625', '0.204315185546875', '0.339813232421875', '0.01068115234375', '0.12115478515625', '0.8824669590996357', '0.14312744140625', '0.11474609375', '0.00030517578125']
	#return ['2.4840717749391805', '0.8642687947601027', '0.6716802638330552', '0.6445059291513201', '0.18363742258692078', '0.34848406205615856', '0.0', '0.08708876231955448', '0.8099066983671483', '0.13444941357093784', '0.1019287109375', '0.00091552734375']
	#return ['2.5277017387202596', '0.8845281567426589', '0.6938348358243344', '0.6441905341165939', '0.1876379059342947', '0.3525885469636667', '0.000152587890625', '0.08270263671875', '0.8104907170441137', '0.13479637246098095', '0.09997928479635804', '0']
	#return ['2.5128991263549563', '0.8682248797509945', '0.6974102772350471', '0.6430367519173049', '0.18759079227009004', '0.35200035657490886', '0', '0.081024169921875', '0.8063903550008131', '0.1337707834765821', '0.10034764813932015', '0.0']
	#return ['2.5128991263549563', '0.8682248797509945', '0.6974102772350471', '0.6430367519173049', '0.18759079227009004', '0.35200035657490886', '0', '0.081024169921875', '0.8063903550008131', '0.1337707834765821', '0.10034764813932015', '0.0']
	#F = -0.0781508867518
	
	#Dataset 4
	#return ['2.85985775683487', '0.9267637022088806', '0.6628070747539567', '0.997467041015625', '0.242462158203125', '0.4351806640625', '0.07171630859375', '0.0921630859375', '0.928765648929428', '0.146942138671875', '0.15716552734375', '0.0079345703125']
	#return ['2.99022162812857', '0.7884457667059422', '0.6983268587119232', '1.1081482216706804', '0.28043690215139344', '0.4713831902323597', '0.144006292554131', '0.09137884687415836', '0.8095046395500969', '0.14157658109183868', '0.000152587890625', '0']
	#return ['3.1356373486079865', '0.6036463462562809', '1.0182658878178614', '1.087932643663382', '0.088653564453125', '0.5218626526341373', '0.14410423131910016', '0.5812363674464669', '0.7144984571563371', '0.10268849219169768', '0.0', '0.0']
	#return ['3.26878357705116', '0.4575566657296788', '1.0424457516289976', '1.125872145516671', '0.050201416015625', '0.5634436652114169', '0.1638962220235153', '0.817944324057351', '0.9949303921593331', '0.13133891682657417', '0.009307861328125', '0.044403076171875']
	#return ['3.1949533088195192', '0.4965033664189338', '1.1080881656825448', '1.0892523186169094', '0.0543212890625', '0.5452684372607394', '0.1536736382007232', '0.7559587618373043', '1.0156482699666225', '0.1173778509608393', '0.001220703125', '0.04461220225789629']
	#F = -0.077364749635
	
	format_seqs = False
	
	if format_seqs:
		
		seq0 = ['4.809545846021189', '2.769395885390771', '9.007771961336363', '1.0513761688776149', '1.6251196796122962', '0.0048828125', '2.2863033801905055', '0.008912056351195876', '0.0', '4.130372356944157', '0.0', '0.0', '17.32506627507297', '0.41047738863592964', '12.336323009089774', '7.938429562688205', '0.06282903645622034', '19.69532005130295', '0.0']
		seq1 = ['5.009042138865591', '2.8374004819669434', '8.308771860687274', '1.0675076941462542', '1.7386572747365714', '0.01953125', '2.480100443215413', '0.0048828125', '0.0', '4.566241303550197', '0.00040853764568676794', '0.005488864714162442', '18.190008335761654', '0.44559899239724565', '11.686500857619393', '8.236159683565376', '0.0857334304089658', '18.88004108067694', '0.0']
		seq2 = ['4.917772813929649', '2.7627930961817344', '8.323327571961318', '1.078594082826828', '1.7249733730216235', '0.0', '2.3372744483167374', '0.004401721242518502', '0.0', '4.511448286953714', '0.0', '0.00030321285717693563', '18.089708618077065', '0.4760524613479595', '12.044528489816493', '7.9991681861903645', '0.08144860401711157', '20.951960088156184', '0.0']
		seq3 = ['4.943905422376667', '2.7746722114117213', '8.21235925377754', '1.2181239683225198', '1.74508432825378', '0.01953125', '2.4917143755249116', '0.007921549666896961', '0.0', '4.311681553678738', '0.0', '0.0019092094290803186', '19.456917757852693', '0.5093834173134532', '11.973192651178307', '8.200357924097753', '0.09457694300421102', '21.462031441016105', '0.0']
		seq4 = ['4.943905422376667', '2.7746722114117213', '8.21235925377754', '1.2181239683225198', '1.74508432825378', '0.01953125', '2.4917143755249116', '0.007921549666896961', '0.0', '4.311681553678738', '0.0', '0.0019092094290803186', '19.456917757852693', '0.5093834173134532', '11.973192651178307', '8.200357924097753', '0.09457694300421102', '21.462031441016105', '0.0']
		
		#seq0 = [4.8951022188876605, 2.7294715493091863, 12.57869962018496, 1.0831668204651368, 1.6810401362246079, 0.008056640625, 2.3790868731461265, 0.0087984126605334338, 0.0017989659675254105, 4.261926963488472, 0.0, 0.0, 18.627515451258201, 0.31303300702426418, 12.022457919615231, 8.1887033701243066, 0.055850617272331413, 21.260427383717126, 0.0]
		#seq1 = seq0
		#seq2 = seq0
		#seq3 = seq0
		#seq4 = seq0
		
		seqs = [seq0, seq1, seq2, seq3, seq4]
		params = np.array([[float(term) for term in seq] for seq in seqs])
		m_par = np.mean(params, 0)
		s_par = [np.std(param, ddof = 0) for param in params.T]
	
		line1 = r''
		line2 = r''
		line3 = r''
	
		for i in range(len(m_par)):
		
			co,a = sig_figs(m_par[i], 3)
			vp = round(s_par[i]*10**-a, 3-1)
		
			if str(co) == '0.000':
			
				line1 += r' & $0.000$'
				line2 += r' & $0.000$'
				line3 += r' &'
		
			else:
		
				if abs(a) > 2:
		
					if len(str(co)) < len(str(vp)):
						co = str(co) + '0'
		
					if len(str(co)) > len(str(vp)) and a < 0:
						vp = str(vp) + '0'
				
					line1 += r' & $' + str(co) + r'$'
					line2 += r' & $' + str(vp) + r'$'
					line3 += r' & $(\times 10^{' + str(a) + r'})$'
				else:
					co = co*10**a
					vp = vp*10**a
			
					if len(str(co)) < len(str(vp)):
						co = str(co) + '0'
		
					if len(str(co)) > len(str(vp)) and a < 0:
						vp = str(vp) + '0'
				
					line1 += r' & $' + str(co) + r'$'
					line2 += r' & $' + str(vp) + r'$'
					line3 += r' &'
	
		print(line1 + r' \\')
		print(line2 + r' \\')
		print(line3 + r' \\')
	
		print('# ave seq = '+str([str(term) for term in np.mean(params, 0)]))
		print('# sig seq = '+str([str(term) for term in s_par]))
		#print('# max seq = '+str([str(term + 2*s_par[i]) for i,term in enumerate(np.mean(params, 0))]))
		#print('# min seq = '+str([str(term - 2*s_par[i]) for i,term in enumerate(np.mean(params, 0))]))
	
	# E. coli 3 params
	
	#return ['4.070728317096601', '3.333230478407746', '296.5700232011071', '0.0', '0.0', '0.0', '0.0']
	#return ['4.070728317096601', '3.333230478407746', '296.5700232011071', '0.0', '0.0', '0.0', '0.0']
	#return ['4.070728317096601', '3.333230478407746', '296.5700232011071', '0.0', '0.0', '0.0', '0.0']
	#return ['4.044635748345232', '3.3059528838280805', '755.0762028226312', '0.0', '0.0', '0.0', '0.0']
	#seq0 = ['4.1556019295826445', '3.4222890685589213', '209.00277619581243', '0.0', '0.0', '0.0', '0.0']
	
	#F0 = -0.072434004241478847
	#F1 = -0.072634763553495671
	#F2 = -0.073008431398455101
	#F3 = -0.072302828090636401
	#F4 = -0.072231878055759938
	
	
	#return ['12.687267275323322', '12.247922964847136', '43.421387762567605', '0.0', '0.0', '0.0', '0.0']
	#return ['12.303929823707055', '11.864052139231974', '539.8552693713596', '0.0', '0.0', '0.0', '0.0']
	#return ['12.303929823707055', '11.864052139231974', '539.8552693713596', '0.0', '0.0', '0.0', '0.0']
	#return ['12.184272377288357', '11.741782863957514', '2403.2626217264233', '0.0', '0.0', '0.0', '0.0']
	#seq1 = ['12.184272377288357', '11.741782863957514', '2403.2626217264233', '0.0', '0.0', '0.0', '0.0']
	
	#F0 = -0.072058015354567823
	#F1 = -0.071654645044952461 < 
	#F2 = -0.072175801078407098 
	#F3 = -0.071735464447135244 < 
	#F4 = -0.071844663909238229 < 
	
	#return ['5.135245178346727', '4.443820495438132', '20.80805734214482', '0.0', '0.0', '0.0', '0.0']
	#return ['4.933220131133098', '4.237353500293371', '426.19864477476807', '0.0', '0.0', '0.0', '0.0']
	#return ['4.933220131133098', '4.237353500293371', '426.19864477476807', '0.0', '0.0', '0.0', '0.0']
	#return ['5.0015830419868355', '4.309044005277189', '3613.6870767348', '0.0', '0.0', '0.0', '0.0']
	#seq2 = ['5.0015830419868355', '4.309044005277189', '3613.6870767348', '0.0', '0.0', '0.0', '0.0']
	
	#F0 = -0.072221250303824647
	#F1 = -0.072454775729686657
	#F2 = -0.072370527329185974
	#F3 = -0.072074944104735264
	#F4 = -0.072103933812253149
	
	#return ['4.205562719972752', '3.4564101273792716', '4.248049175343091', '0.0', '0.0', '0.0', '0.0']
	#return ['4.176102569630661', '3.4438360834792423', '224.2331063520505', '0.0', '0.0', '0.0', '0.0']
	#return ['4.176102569630661', '3.4438360834792423', '224.2331063520505', '0.0', '0.0', '0.0', '0.0']
	#return ['4.152755247549198', '3.4194116621785273', '312.8069191658067', '0.0', '0.0', '0.0', '0.0']
	#seq3 = ['4.152755247549198', '3.4194116621785273', '312.8069191658067', '0.0', '0.0', '0.0', '0.0']
	
	#F0 = -0.072573549195405554
	#F1 = -0.07262022509963359
	#F2 = -0.072878287459036087
	#F3 = -0.072195818497735334
	#F4 = -0.07215572452674951
	
	#return ['6.684643229615887', '6.059711483872533', '44.01308704640587', '0.0', '0.0', '0.0', '0.0']
	#return ['6.4324350510586825', '5.80084190606147', '1052.226403640431', '0.0', '0.0', '0.0', '0.0']
	#return ['6.4324350510586825', '5.80084190606147', '1052.226403640431', '0.0', '0.0', '0.0', '0.0']
	#return ['6.4324350510586825', '5.80084190606147', '1052.226403640431', '0.0', '0.0', '0.0', '0.0']
	#seq4 = ['6.4324350510586825', '5.80084190606147', '1052.226403640431', '0.0', '0.0', '0.0', '0.0']
	
	#F0 = -0.072003979843211982 <
	#F1 = -0.071994842278462992
	#F2 = -0.072142172950914241 <
	#F3 = -0.071931278986479025
	#F4 = -0.071885296906026616
	
	#return ['5.14883957047239', '5.001550776622281', '981023.256072998', '0.0', '0.0', '0.0', '0.0']
	#return ['5.148790568976876', '5.001592411095677', '893240.8938531504', '0.0', '0.0', '0.0', '0.0']
	#return ['5.148880343346158', '5.001533124724744', '999989.9609375', '0.0', '0.0', '0.0', '0.0']
	#return ['5.148880343346158', '5.001533124724744', '999989.9609375', '0.0', '0.0', '0.0', '0.0']
	#return ['5.148880343346158', '5.001533124724744', '999989.9609375', '0.0', '0.0', '0.0', '0.0']
	
	
	#return ['7.9265380859375', '5.43660888671875', '11.3958740234375', '5.465850830078125', '0.520172119140625', '0.6828693608787226', '0.23681640625', '0.761260986328125', '0.788116455078125', '0.203399658203125', '0.701141357421875', '0.548095703125']
	#return ['6.219937601261514', '4.867566420342054', '10.918484452993981', '5.2931758150174195', '0.5059814453125', '0.719990400108882', '0.2502121188551847', '0.7724437713490213', '0.8280014861266349', '0.2301242495975354', '0.7175214436820089', '0.5143457151140184']
	#return ['5.234715576532309', '4.118941518503705', '10.184649739418933', '5.105301673723267', '0.49565936747364525', '0.7461025893046127', '0.25390625', '0.7992243386536865', '0.8459379368638856', '0.24648091754485818', '0.7480048604407618', '0.5038073279044396']
	#return ['4.909057663390851', '3.960622240302208', '10.00379288761508', '4.993865453218108', '0.4895149910228662', '0.753691996751181', '0.2530246546966731', '0.8016936754115179', '0.8529899144030163', '0.25350986006211207', '0.7516189467904926', '0.49936120268485296']
	#return ['4.909057663390851', '3.960622240302208', '10.00379288761508', '4.993865453218108', '0.4895149910228662', '0.753691996751181', '0.2530246546966731', '0.8016936754115179', '0.8529899144030163', '0.25350986006211207', '0.7516189467904926', '0.49936120268485296']
	
	#return ['4.966968994140622', '4.907294921875007', '21.467742919921875', '0.0', '0.0', '0.0', '0.0']
	#return ['4.966971192976845', '4.907290781146004', '21.46958023083282', '0.0', '0.0', '0.0', '0.0']
	#return ['4.966971192976845', '4.907290781146004', '21.46958023083282', '0.0', '0.0', '0.0', '0.0']
	#return ['4.966971192976845', '4.907290781146004', '21.46958023083282', '0.0', '0.0', '0.0', '0.0']
	#return ['4.966971192976845', '4.907290781146004', '21.46958023083282', '0.0', '0.0', '0.0', '0.0']
	
	#return ['0.14613265248167906', '1.9097914332299126', '974526.175994873', '0.0', '0.0', '0.0', '0.0']
	#return ['0.14615131361182224', '1.909836736296941', '977129.8090944575', '0.0', '0.0', '0.0', '0.0']
	#return ['0.14615474407715776', '1.9098440636337095', '949482.5968940931', '0.0', '0.0', '0.0', '0.0']
	#return ['0.14615314692294823', '1.9098333357170827', '903865.288949611', '0.0', '0.0', '0.0', '0.0']
	#return ['0.14615314692294823', '1.9098333357170827', '903865.288949611', '0.0', '0.0', '0.0', '0.0']
	
	
	#return ['5.0224853515625', '4.975335693359375', '1288.0373399281698', '0.0', '1.8612557655118374', '2.5143690242486207', '10', '0.0', '3.982696533203125', '1.875', '0.0', '7.467498779296875']
	#return ['4.904998354535818', '4.918176989605211', '2855.8650669107274', '0', '0.15625', '1.9550826470163125', '0.0439453125', '0.0', '3.981674337507102', '1.933317203369051', '0.0', '7.697797393831987']
	#return ['4.9052020458911745', '4.918357093673839', '5511.678883893679', '0.0', '5.0', '0', '10.0', '0.0', '3.885969603561031', '1.8513036663090965', '0.0', '7.1940898527278465']
	#return ['4.9052020458911745', '4.918357093673839', '5511.678883893679', '0.0', '5.0', '0', '10.0', '0.0', '3.885969603561031', '1.8513036663090965', '0.0', '7.1940898527278465']
	#return ['4.909653484591381', '4.920570102726546', '6006.136365878134', '0', '4.679789128184073', '0.0', '0.4296875', '0.0', '3.9536326107749713', '1.8856558581199447', '0.0', '7.455171669718869']
	#return ['0.7421094862733502', '0.8102883680253719', '0.05485260693851279', '0.5005348416521083', '0.009162384262059179', '0.8267578159890056', '0.6086628495054409', '0.5866796810054105', '0.3622285172549628', '0.6216532922387181', '0.3117931448279824', '0.8194190223788499']
	
	#return ['5', '5', '10', '0', '0', '0', '0']
	#return ['5', '4', '10', '5', '.5', '.75', '.25', '.8', '.85', '.25', '.75', '.5']
	#return ['5', '4', '10', '20', '5', '.5', '.75', '.25', '.8', '.85', '.25', '.75', '.5']
	if n_params == 3:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(3))] + ['0']*2
	elif n_params == 4:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(4))] + ['0']*2
	elif n_params == 5:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(5))]
	elif n_params == 7:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(7))]
	elif n_params == 8:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(8))]
	elif n_params == 12:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(12))]
	elif n_params == 13:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(13))]
	elif n_params == 16:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(16))]
	elif n_params == 19:
		return [str(round(init_ranges[i]*term,2)) for i,term in enumerate(np.random.random(19))] 



amino_group = {'F':'nonpolar', 'L':'nonpolar', 'I':'nonpolar', 'M':'nonpolar',\
	      'V':'nonpolar', 'P':'nonpolar', 'A':'nonpolar', 'W':'nonpolar',\
	      'G':'nonpolar', 'S1':'polar', 'S2':'polar', 'S':'polar', 'T':'polar', 'Y':'polar',\
	      'Q':'polar', 'N':'polar', 'C':'polar', 'U':'polar',\
	      'H':'basic', 'K':'basic', 'R':'basic',\
	      'D':'acidic', 'E':'acidic', '*':'none', 'X':'unde'}


dx = 1e2
depth = 2
curr_depth = -1
check_rel_rates = False

def Set_Params(model_params):
	global kappa1_i, kappa2_i, sbeta_i, T0beta_i, r_i, mutables, init_ranges, max_vals, min_vals, n_params
	n_params = model_params
	
	if model_params == 3:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 1]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 1]
		mutables = [i for i in range(3)]

	elif model_params == 4:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 2]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 1]
		mutables = [i for i in range(4)]
	
	elif model_params == 5:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 1]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 1]
		mutables = [i for i in range(5)]
	
	elif model_params == 7:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 1]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 3]
		mutables = [i for i in range(7)]

	elif model_params == 8:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 2]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 3]
		mutables = [i for i in range(8)]

	elif model_params == 12:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 1]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 8]
		mutables = [i for i in range(12)]

	elif model_params == 13:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 2]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 8]
		mutables = [i for i in range(13)]

	elif model_params == 16:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 1]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 12]
		mutables = [i for i in range(16)]

	elif model_params == 19:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 1]
		#T0beta_i = sbeta_i[-1]
		r_i = [sbeta_i[-1], sbeta_i[-1] + 16]
		mutables = [i for i in range(19)]
	
	elif model_params == 20:

		kappa1_i = 0
		kappa2_i = 1
		sbeta_i = [2, 2 + 1]
		T0beta_i = sbeta_i[-1]
		r_i = [T0beta_i + 1, T0beta_i + 1 + 16]
		mutables = [i for i in range(20)]
	
	init_ranges = [100 for i in range(r_i[-1])]
	max_vals = [10**6] + [10**2 for i in range(3, r_i[-1])]
	min_vals = [0.1, 0.1] + [0.0] + [0.0] + [0.0 for i in range(4, r_i[-1])]

def is_Transition(codon_1, codon_2):
	
	trans = False
	del_nuc = ''
	
	for k in range(len(codon_1)):
		if not codon_1[k] == codon_2[k]:
			del_nuc = codon_1[k]
			if (codon_1[k] in ['T', 'C'] and codon_2[k] in ['T', 'C']) or\
				(codon_1[k] in ['G', 'A'] and codon_2[k] in ['G', 'A']):
				trans = True
	return trans, del_nuc
		
def Get_Ceff(i,rs):
	
	global wobble_check
	
	if len(rs) == 1:
		
		r =	{'A/A': rs[0],\
			 'A/C': rs[0],\
			 'A/G': rs[0],\
			 'A/T': 1.,\

			 'C/A': rs[0],\
			 'C/C': 0.,\
			 'C/G': 1.,\
			 'C/T': 0.,\

			 'G/A': 0.,\
			 'G/C': 1.,\
			 'G/G': 0.,\
			 'G/T': rs[0],\

			 'T/A': 1.,\
			 'T/C': rs[0],\
			 'T/G': rs[0],\
			 'T/T': rs[0]}
	
	elif len(rs) == 3:
		
		r =	{'A/A': rs[1],\
			 'A/C': rs[0],\
			 'A/G': rs[2],\
			 'A/T': 1.,\

			 'C/A': rs[0],\
			 'C/C': 0.,\
			 'C/G': 1.,\
			 'C/T': 0.,\

			 'G/A': 0.,\
			 'G/C': 1.,\
			 'G/G': 0.,\
			 'G/T': rs[0],\

			 'T/A': 1.,\
			 'T/C': rs[2],\
			 'T/G': rs[0],\
			 'T/T': rs[1]}
			 
	elif len(rs) == 8:
		
		r =	{'A/A': rs[0],\
			 'A/C': rs[1],\
			 'A/G': rs[2],\
			 'A/T': 1.,\

			 'C/A': rs[3],\
			 'C/C': 1e-9,\
			 'C/G': 1.,\
			 'C/T': 1e-9,\

			 'G/A': 1e-9,\
			 'G/C': 1.,\
			 'G/G': 1e-9,\
			 'G/T': rs[4],\

			 'T/A': 1.,\
			 'T/C': rs[5],\
			 'T/G': rs[6],\
			 'T/T': rs[7]}
	
	elif len(rs) == 12:
		
		r =	{'A/A': rs[0],\
			 'A/C': rs[1],\
			 'A/G': rs[2],\
			 'A/T': 1.,\

			 'C/A': rs[3],\
			 'C/C': rs[4],\
			 'C/G': 1.,\
			 'C/T': rs[5],\

			 'G/A': rs[6],\
			 'G/C': 1.,\
			 'G/G': rs[7],\
			 'G/T': rs[8],\

			 'T/A': 1.,\
			 'T/C': rs[9],\
			 'T/G': rs[10],\
			 'T/T': rs[11]}
	
	elif len(rs) == 16:
		
		r =	{'A/A': rs[0],\
			 'A/C': rs[1],\
			 'A/G': rs[2],\
			 'A/T': rs[3],\

			 'C/A': rs[4],\
			 'C/C': rs[5],\
			 'C/G': rs[6],\
			 'C/T': rs[7],\

			 'G/A': rs[8],\
			 'G/C': rs[9],\
			 'G/G': rs[10],\
			 'G/T': rs[11],\

			 'T/A': rs[12],\
			 'T/C': rs[13],\
			 'T/G': rs[14],\
			 'T/T': rs[15]}
	
	codon = codons[i]
	cog_nuc = rev_comp[codon][0]
	
	anticodon23 = rev_comp[codon][1:]
	
	C_eff = 0
	#if check_rel_rates:
	#	print(codon)
	#	print('anticodons: ')
		
		
	for nuc in ['A', 'C', 'G', 'T']:
	
		anticodon = nuc + anticodon23
		
		
		
		#if ((nuc == 'A' and (codon[2] in ['A', 'G'])) or (nuc == 'G' and codon[2] == 'T')) and freqs['tr'+anticodon] > 0:
		#if check_rel_rates:
			#if anticodon == 'TCA':
			#	cog_A = 'U'
			#else:
			#	cog_A = str(trans[rev_comp[anticodon]])
			#	
			#print('\t' + cog_A + ' ' + anticodon + ', r('+nuc + '/' + codon[2]+') = ' + str(r[nuc + '/' + codon[2]]) +\
			#	', C = '+str(freqs['tr'+anticodon]))
			
			
			#if not nuc == cog_nuc:
			#	e_nucs = ['A', 'C', 'G', 'T']
			#	e_nucs.remove(cog_nuc)
			#	e_nucs.remove(nuc)
			#
			#	 
			#	e_check = sum([int(r[e_nuc + '/' + codon[2]]*freqs['tr'+e_nuc+anticodon23] > 0 and wobble_check[e_nuc + '/' + codon[2]] == 1) for e_nuc in e_nucs]) > 0
			#	print('\t\t', e_nucs, e_check)
			#	if freqs['tr'+anticodon] > 0 and (1*freqs['tr' + cog_nuc + anticodon23] > 0 or e_check):
			#		wobble_check[nuc + '/' + codon[2]] = 1
		
		#if codon == 'ATT':
		#	print(codon, anticodon, r[nuc + '/' + codon[2]], freqs['tr'+anticodon])
			
		
		C_eff += r[nuc + '/' + codon[2]]*freqs['tr'+anticodon]
	#if codon == 'ATT':
	#	print('c = '+codon+', C_eff = '+str(C_eff))
	
	return C_eff
	
def Get_sCeff(i,rs,A,s_arr):
	global r
	
	if len(rs) == 1:
		
		r =	{'A/A': rs[0],\
			 'A/C': rs[0],\
			 'A/G': rs[0],\
			 'A/T': 1.,\

			 'C/A': rs[0],\
			 'C/C': 0.,\
			 'C/G': 1.,\
			 'C/T': 0.,\

			 'G/A': 0.,\
			 'G/C': 1.,\
			 'G/G': 0.,\
			 'G/T': rs[0],\

			 'T/A': 1.,\
			 'T/C': rs[0],\
			 'T/G': rs[0],\
			 'T/T': rs[0]}
	
	elif len(rs) == 3:
		
		r =	{'A/A': rs[1],\
			 'A/C': rs[0],\
			 'A/G': rs[2],\
			 'A/T': 1.,\

			 'C/A': rs[0],\
			 'C/C': 0.,\
			 'C/G': 1.,\
			 'C/T': 0.,\

			 'G/A': 0.,\
			 'G/C': 1.,\
			 'G/G': 0.,\
			 'G/T': rs[0],\

			 'T/A': 1.,\
			 'T/C': rs[2],\
			 'T/G': rs[0],\
			 'T/T': rs[1]}
			 
	elif len(rs) == 8:
		
		r =	{'A/A': rs[0],\
			 'A/C': rs[1],\
			 'A/G': rs[2],\
			 'A/T': 1.,\

			 'C/A': rs[3],\
			 'C/C': 1e-9,\
			 'C/G': 1.,\
			 'C/T': 1e-9,\

			 'G/A': 1e-9,\
			 'G/C': 1.,\
			 'G/G': 1e-9,\
			 'G/T': rs[4],\

			 'T/A': 1.,\
			 'T/C': rs[5],\
			 'T/G': rs[6],\
			 'T/T': rs[7]}
	
	elif len(rs) == 12:
		
		r =	{'A/A': rs[0],\
			 'A/C': rs[1],\
			 'A/G': rs[2],\
			 'A/T': 1.,\

			 'C/A': rs[3],\
			 'C/C': rs[4],\
			 'C/G': 1.,\
			 'C/T': rs[5],\

			 'G/A': rs[6],\
			 'G/C': 1.,\
			 'G/G': rs[7],\
			 'G/T': rs[8],\

			 'T/A': 1.,\
			 'T/C': rs[9],\
			 'T/G': rs[10],\
			 'T/T': rs[11]}
	
	elif len(rs) == 16:
		
		r =	{'A/A': rs[0],\
			 'A/C': rs[1],\
			 'A/G': rs[2],\
			 'A/T': rs[3],\

			 'C/A': rs[4],\
			 'C/C': rs[5],\
			 'C/G': rs[6],\
			 'C/T': rs[7],\

			 'G/A': rs[8],\
			 'G/C': rs[9],\
			 'G/G': rs[10],\
			 'G/T': rs[11],\

			 'T/A': rs[12],\
			 'T/C': rs[13],\
			 'T/G': rs[14],\
			 'T/T': rs[15]}
	
	codon = codons[i]
	
	anticodon23 = str(rev_comp[codon])[1:]
	
	sC_eff = 0
	#print(codon)
	#print('anticodons: ')
	if check_rel_rates:
		
		numer = ''
		denom = ''
	
	for nuc in ['A', 'C', 'G', 'T']:
	
		anticodon = nuc + anticodon23
		
		if anticodon == 'TCA':
			cog_A = 'U'
		else:
			cog_A = str(trans[rev_comp[anticodon]])
			
		
		
		if len(s_arr) == 1:
			s = s_arr[0]
			
		elif len(s_arr) == 2:
			
			#print(amino_group[cog_A], amino_group[A])
			if amino_group[cog_A] == amino_group[A]:
				#print('s1')
				s = s_arr[0]
			else:
				#print('s2')
				s = s_arr[1]
		#if ((nuc == 'A' and (codon[2] in ['A', 'G'])) or (nuc == 'G' and codon[2] == 'T')) and freqs['tr'+anticodon] > 0:
			#print(codon)
		#print('\t charge: ' + cog_A + ' -> ' + A + ', s = '+str(s*int(not cog_A == A[0])))
		#print('\t' + cog_A + ' ' + anticodon + ', r('+nuc + '/' + codon[2]+') = ' + str(r[nuc + '/' + codon[2]]) +\
		#		', C = '+str(freqs['tr'+anticodon]))
		if check_rel_rates:
			
			if freqs['tr'+anticodon] > 0:
				denom = denom + ' + '*int(len(denom) > 0) + str(int(freqs['tr'+anticodon]))*int(freqs['tr'+anticodon]>1) +\
					r'r_\text{' + nuc.replace('T', 'U') + '/' + codon[2].replace('T', 'U') + r'}'
				if not cog_A == A[0]:
					numer = numer + ' + '*int(len(numer) > 0) + str(int(freqs['tr'+anticodon]))*int(freqs['tr'+anticodon]>1) +\
						r's r_\text{' + nuc.replace('T', 'U') + '/' + codon[2].replace('T', 'U') + r'}'
		
		sC_eff += s*r[nuc + '/' + codon[2]]*freqs['tr'+anticodon]*int(not cog_A == A[0])
	
	if check_rel_rates:
		#
		if 'G/U' in denom and trans[codon] == A:
		#if A == 'I' and codon == 'ATA':
			#print(A, trans[codon])
			print(r'\[\mathcal{C}_\text{'+codon.replace('T', 'U')+r'}\log\left(1 - \frac{T_0}{'+denom+r'}\right)' +\
				(r'\left(1 - \frac{'+numer+r'}{' + denom + r'}\right)')*int(len(numer) > 0)+'\]')
			#input(' ... ')
		
		
	
	#print('sC_eff = '+str(sC_eff))
	return sC_eff

def Get_s(i,A,s_arr):
	
	codon = codons[i]
	
	anticodon = rev_comp[codon]
	
	if anticodon == 'TCA':
		cog_A = 'U'
	else:
		cog_A = trans[codon]
	
	if len(s_arr) == 1:
		s = s_arr[0]
		
	elif len(s_arr) == 2:
		if amino_group[cog_A] == amino_group[A]:
			s = s_arr[0]
		else:
			s = s_arr[1]
				
	return s*int(not cog_A == A[0])

wobble_check = {}

def Get_Freqs(seq):
	global mut_mat, codon_freqs, ave_mu, wobble_check
	#t0 = time()
	beta = 1e-7
	kappa1 = float(seq[kappa1_i])
	kappa2 = float(seq[kappa2_i])
	
	s_arr = [float(sbeta)*beta for sbeta in seq[sbeta_i[0]:sbeta_i[1]]]
	#s_arr = [float(seq[sbeta_i[0]])*beta, float(seq[sbeta_i[0]])*float(seq[sbeta_i[1]])*beta]
	if not n_params == 19:
		T0 = float(seq[T0beta_i])*beta
	else:
		T0 = beta
		
	rs = [float(r) for r in seq[r_i[0]:r_i[1]]]
	
	pred_codon_freqs = np.zeros(N)
	
	mut_mat = np.array([[0.0 for i in range(N)] for j in range(N)])
	
	for i,codon_1 in enumerate(codons):
		for j,codon_2 in enumerate(codons):
			# codon_1 -> codon_2 / i -> j
			mut_mat[j][i] = beta*freqs['pi'+codon_2]*int(sum([int(codon_1[k] == codon_2[k]) for k in range(len(codon_1))]) == 2)
			is_tran,del_nuc = is_Transition(codon_1, codon_2)
	
			if is_tran:
				if del_nuc in ['T', 'C']:
					mut_mat[j][i] = kappa1*mut_mat[j][i]
			
				elif del_nuc in ['A', 'G']:
					mut_mat[j][i] = kappa2*mut_mat[j][i]
			
			#if mut_mat[j][i] > 0:
	
	ave_mu = 0.0
	
	for i in range(N):
		mu_tot = sum([mut_mat[j][i] for j in range(N) if not i == j])
		mut_mat[i][i] = -mu_tot
		ave_mu += mu_tot*codon_freqs[i]/3/beta
	
	#print('ave mut. rate / beta: '+str(ave_mu/beta))
	
	amino_counts = {}
	for A in amino_acids:
		amino_counts[A] = 0
	
	#sel_cos = []
	#print(time() - t0)
	
	for amino_acid in amino_acids:
		
		#t0 = time()
		fit_mat = np.array([[0.0 for i in range(N)] for j in range(N)])
		#print(amino_acid)
		wobble_check = {'A/A': 0, 'A/C': 0, 'A/G': 0, 'A/T': 1, 'C/A': 0, 'C/C': 0, 'C/G': 1, 'C/T': 0,\
			    'G/A': 0, 'G/C': 1, 'G/G': 0, 'G/T': 0, 'T/A': 1, 'T/C': 0, 'T/G': 0, 'T/T': 0}
			
		for i in range(N):
			#print('\t' + codons[i])
			
			Ceff = Get_Ceff(i,rs)
			
			if abs(Ceff) > 0.:
				sCeff = Get_sCeff(i,rs,amino_acid,s_arr)
				seff = sCeff/Ceff
				#seff = Get_s(i,amino_acid,s_arr)
				fit_mat[i][i] = 1. - seff
				fit_mat[i][i] = fit_mat[i][i]*(1. - T0/Ceff)
				#if seff > 0 and amino_acid == trans[codons[i]]:
				#	print(codons[i], seff, amino_acid)
				#	input(' ... ')
				
			else:
				if T0 > 0.:
					fit_mat[i][i] = 0.
				else:
					s = Get_s(i,amino_acid,s_arr)
					fit_mat[i][i] = 1. - s
			
			#input(' ... ')
			#sel_cos.append(1-fit_mat[i][i])
			#print('\t' + codons[i]+' -> '+str(Seq(codons[i]).translate()) + ', ' + amino_group[str(Seq(codons[i]).translate())]+ ', s/beta = ' + str((1-fit_mat[i][i])/beta))
			#print('\tpi = ' + str(codon_freqs[i]))
			#print('\tCeff = ' + str(Ceff))
			
			#print(wobble_check)
			#if check_rel_rates:
			#	for key in sorted(wobble_check):
			#		print('\t'+key+': '+str(wobble_check[key])+', r = '+str(r[key]))
		
		#print(time() - t0)
		#print(amino_acid, amino_group[amino_acid], amino_freqs[amino_acids.index(amino_acid)])
		U = np.dot(np.identity(N) + np.matrix(mut_mat), np.matrix(fit_mat))
		t1 = time()
		eigen = np.linalg.eig(U)
		#print('\t', time() - t1)
		eig_vals = list(eigen[0])
		eig_vecs = eigen[1].T
		max_eig = max(eig_vals)
		eig_index = eig_vals.index(max_eig)
		max_vec = np.array(eig_vecs[eig_index])[0]
		ps = max_vec/sum(max_vec)
		
		#if amino_acid == 'R':
		#	print(list(ps))
		
		pred_codon_freqs = pred_codon_freqs + amino_freqs[amino_acids.index(amino_acid)]*ps
		
		for A in amino_acids:
			amino_counts[A] += sum([ps[codons.index(codon)] for codon in amino_acid_codons[A]])*amino_freqs[amino_acids.index(amino_acid)]
		
		#print('\t', time() - t0)
		if False:
			import matplotlib.pyplot as plt
			plt.style.use('classic')
			plt.figure(figsize=(30,7.5))
			plt.title(str(amino_acid_codons[amino_acid]))
			#print(amino_acid)
			#plt.clf()
			#plt.bar([i-1/3 for i in range(N)], pred_codon_freqs, width = 1/3)
			plt.bar([i for i in range(N)], ps/N, width = .5, color = 'green')
			#print(ps/N)
			#true = np.array([freqs[data_type+':'+codon] for codon in codons])
			#true = true/sum(true)
			#print(pred_codon_freqs)
			#plt.bar([i for i in range(N)], true, width = 1/3)
			plt.ylabel(r'$p(c)$', fontsize = 24)
			plt.xticks([i for i in range(N)], [codons[i] for i in range(N)], fontsize = 20, rotation = 90)
			plt.xlim([-1.5, 64.5])
			plt.show()
			#plt.pause(0.1)
		
	#print('\t', time() - t1)
	#print('max S = '+str(max([s for s in sel_cos if not s == 1])))
	#print('mean S = '+str(np.mean([s for s in sel_cos if not s == 1])))
	#print('min S = '+str(min([s for s in sel_cos if not s == 1])))
	if False:
		
		
		indexed_freqs = [(abs(pred_codon_freqs[i] - freq), i) for i,freq in enumerate(codon_freqs)]
		indexed_freqs.sort()
		indexed_freqs = indexed_freqs[::-1]
		
		#indexed_freqs = [(freq, i) for i,freq in enumerate(codon_freqs)]
		#indexed_freqs.sort()
		#indexed_freqs = indexed_freqs[::-1]
		err_codons = [codons[i] for freq,i in indexed_freqs[:4]]
		#print(indexed_freqs)
		print([int(codon in err_codons) for i,codon in enumerate(codons)])
		#print()
		if False:
			import matplotlib.pyplot as plt
			plt.style.use('classic')
			plt.figure(figsize=(25,7.5))
			pred_errs = np.array([np.sqrt(pred_codon_freqs[i]*(1-pred_codon_freqs[i])/data_points) for freq,i in indexed_freqs])
			rel_err = np.array([(pred_codon_freqs[i] - codon_freqs[i]) for freq,i in indexed_freqs])
		
			pred_color = (0, 0, 1)
		
			w = 1/4
			slope, intercept, r_value, p_value, std_err = stats.linregress(pred_codon_freqs, codon_freqs)
	
			p_pow = int(np.floor(np.log(p_value)/np.log(10)))
			p_num = p_value*10**-p_pow
		
		
			plt.bar([i for i in range(N)], [pred_codon_freqs[i] for freq,i in indexed_freqs], width = w, color = pred_color, yerr = 3*pred_errs)
			plt.bar([i - w for i in range(N)], [codon_freqs[i] for freq,i in indexed_freqs], width = w, color = 'grey')
			plt.ylabel(r' codon frequencies ', fontsize = 26, color=pred_color)
			plt.xticks([i for i in range(N)], [codons[i] for freq,i in indexed_freqs], fontsize = 20, rotation = 90)
			plt.xlim([-1.5, 64.5])
			plt.legend([r' model prediction ', r' genomic data '], loc = 'best', fontsize = 22)
			plt.ylim([0,0.1])
			plt.yticks([0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06], fontsize = 18)
			plt.tick_params('y', colors=pred_color)
			plt.text(4, .04, r'$p = %s$' %str(round(p_num, 1)) + r'$\times 10^{%s}$' %str(p_pow) + '\n' + \
					r'$\rho = %s$' %str(round(r_value, 2)), fontsize = 26)
		
			ax2 = plt.twinx()
			ax2.plot([i for i in range(N)], abs(rel_err), 'ko-', lw = 2)
			ax2.axhline(0, 0, 1, lw = 2, linestyle='dashed', color='grey')
			ax2.axhline(.01, 0, 1, lw = 2, linestyle='dashed', color='grey', alpha = .75)
			#ax2.axhline(-.2, 0, 1, lw = 2, linestyle='dashed', color='grey', alpha = .66)
			ax2.axhline(.02, 0, 1, lw = 2, linestyle='dashed', color='grey', alpha = .5)
			ax2.axhline(.03, 0, 1, lw = 2, linestyle='dashed', color='grey', alpha = .25, zorder = -100)
			#ax2.axhline(-.4, 0, 1, lw = 2, linestyle='dashed', color='grey', alpha = .33)
			ax2.set_ylim([-.06, -.06 + .1])
			ax2.set_ylabel(r' prediction error ', color='black', fontsize = 26)
			ax2.set_yticks([0, .01, .02, .03, .04])
			plt.tick_params('y', colors='black')
			plt.yticks(fontsize = 18)
			plt.tight_layout()
		
			plt.show()
	
	if False:
		
		import matplotlib.pyplot as plt
		
		plt.style.use('classic')
		
		
		plt.bar([i-.4 for i in range(len(amino_acid_codons[A]))], true, width = .4, color = (0., 0., .5))
		plt.bar([i for i in range(len(amino_acid_codons[A]))], pred, width = .4, color = (.5, 0., .3))
		plt.ylabel(r'$|p_c\rangle$', fontsize = 24)
		plt.xticks([i for i in range(len(amino_acid_codons[A]))], [codon for codon in amino_acid_codons[A]], fontsize = 20, rotation = 70)
		plt.xlim([-1.5, len(amino_acid_codons[A]) + .5])
		plt.title(r' Arginine ', fontsize = 26)
		
		#plt.axes([.65, .6, .2, .2], facecolor='y')
		#plt.plot(pred, true, 'bo')
		#plt.title(r'Leucine')
		#plt.xticks([])
		#plt.yticks([])
	
		#plt.show()
		
		
		f, axarr = plt.subplots(1, 3, figsize=(15,5))
		
		A = 'R'
		
		pred = np.array([pred_codon_freqs[codons.index(codon)] for codon in amino_acid_codons[A]])
		pred_errs = np.array([np.sqrt(pred_codon_freqs[codons.index(codon)]*(1-pred_codon_freqs[codons.index(codon)])/data_points) for codon in amino_acid_codons[A]])
		pred_errs = pred_errs/sum(pred)
		pred = pred/sum(pred)

		true = np.array([codon_freqs[codons.index(codon)] for codon in amino_acid_codons[A]])
		true_errs = np.array([np.sqrt(codon_freqs[codons.index(codon)]*(1-codon_freqs[codons.index(codon)])/data_points) for codon in amino_acid_codons[A]])
		true_errs = true_errs/sum(true)
		true = true/sum(true)
		
		axarr[0].bar([i-.3 for i in range(len(amino_acid_codons[A]))], true, width = .3, color = (0., 0., .5), yerr = 3*true_errs)
		axarr[0].bar([i for i in range(len(amino_acid_codons[A]))], pred, width = .3, color = (.7, 0., .3), yerr = 3*pred_errs)
		axarr[0].set_xticks([i for i in range(len(amino_acid_codons[A]))])
		axarr[0].set_xticklabels([codon for codon in amino_acid_codons[A]], fontsize = 25, rotation = 70)
		axarr[0].set_xlim([-1.5, len(amino_acid_codons[A]) + .5])
		axarr[0].set_ylim([0., .7])
		axarr[0].set_yticks([.05, .2, .35, .5, .65])
		axarr[0].set_yticklabels([.05, .2, .35, .5, .65], fontsize = 18)
		axarr[0].set_ylabel(r' frequency ', fontsize = 25)
		axarr[0].set_title(r' Arginine ', fontsize = 27)
		axarr[0].legend([r'Genomic data', 'Model predictions'], fontsize = 24, loc = 'best')
		
		A = 'L'
		
		pred = np.array([pred_codon_freqs[codons.index(codon)] for codon in amino_acid_codons[A]])
		pred_errs = np.array([np.sqrt(pred_codon_freqs[codons.index(codon)]*(1-pred_codon_freqs[codons.index(codon)])/data_points) for codon in amino_acid_codons[A]])
		pred_errs = pred_errs/sum(pred)
		pred = pred/sum(pred)

		true = np.array([codon_freqs[codons.index(codon)] for codon in amino_acid_codons[A]])
		true_errs = np.array([np.sqrt(codon_freqs[codons.index(codon)]*(1-codon_freqs[codons.index(codon)])/data_points) for codon in amino_acid_codons[A]])
		true_errs = true_errs/sum(true)
		true = true/sum(true)
		
		axarr[1].bar([i-.3 for i in range(len(amino_acid_codons[A]))], true, width = .3, color = (0., 0., .5), yerr = 3*true_errs)
		axarr[1].bar([i for i in range(len(amino_acid_codons[A]))], pred, width = .3, color = (.7, 0., .3), yerr = 3*pred_errs)
		axarr[1].set_xticks([i for i in range(len(amino_acid_codons[A]))])
		axarr[1].set_xticklabels([codon for codon in amino_acid_codons[A]], fontsize = 25, rotation = 70)
		axarr[1].set_xlim([-1.5, len(amino_acid_codons[A]) + .5])
		axarr[1].set_ylim([0., .7])
		axarr[1].set_title(r' Leucine ', fontsize = 27)
		
		A = 'G'
		
		pred = np.array([pred_codon_freqs[codons.index(codon)] for codon in amino_acid_codons[A]])
		pred_errs = np.array([np.sqrt(pred_codon_freqs[codons.index(codon)]*(1-pred_codon_freqs[codons.index(codon)])/data_points) for codon in amino_acid_codons[A]])
		pred_errs = pred_errs/sum(pred)
		pred = pred/sum(pred)

		true = np.array([codon_freqs[codons.index(codon)] for codon in amino_acid_codons[A]])
		true_errs = np.array([np.sqrt(codon_freqs[codons.index(codon)]*(1-codon_freqs[codons.index(codon)])/data_points) for codon in amino_acid_codons[A]])
		true_errs = true_errs/sum(true)
		true = true/sum(true)
		
		axarr[2].bar([i-.3 for i in range(len(amino_acid_codons[A]))], true, width = .3, color = (0., 0., .5), yerr = 3*true_errs)
		axarr[2].bar([i for i in range(len(amino_acid_codons[A]))], pred, width = .3, color = (.7, 0., .3), yerr = 3*pred_errs)
		axarr[2].set_xticks([i for i in range(len(amino_acid_codons[A]))])
		axarr[2].set_xticklabels([codon for codon in amino_acid_codons[A]], fontsize = 25, rotation = 70)
		axarr[2].set_xlim([-1.5, len(amino_acid_codons[A]) + .5])
		axarr[2].set_ylim([0., .7])
		axarr[2].set_title(r' Glycine ', fontsize = 27)
		# Fine-tune figure; hide x ticks for top plots and y ticks for right plots
		#plt.setp([a.get_xticklabels() for a in axarr[0, :]], visible=False)
		plt.setp([a.get_yticklabels() for a in axarr[1:]], visible=False)
		plt.show()
		
		A = 'R'
		
		true = np.array([codon_freqs[codons.index(codon)] for codon in amino_acid_codons[A]])
		true = true/sum(true)
		
		tris = np.array([freqs['pi'+codon] for codon in amino_acid_codons[A]])
		tris = tris/sum(tris)
		
		plt.bar([i for i in range(len(amino_acid_codons[A]))], tris, width = .3, color = (0., 0.7, 0.))
		plt.bar([i-.3 for i in range(len(amino_acid_codons[A]))], true, width = .3, color = (0., 0., 0.5))
		plt.ylabel(r'frequency ($E.\;coli$ genome)', fontsize = 24)
		plt.yticks([.1, .2, .3, .4, .5], fontsize = 20)
		plt.xticks([i for i in range(len(amino_acid_codons[A]))], [codon for codon in amino_acid_codons[A]], fontsize = 24, rotation = 70)
		plt.xlim([-1.0, len(amino_acid_codons[A])])
		plt.ylim([0,.6])
		plt.legend([r'Intergenic region trimers', r'CDS region codons'], fontsize = 24, loc = 'best')
		plt.title(r"Codons of Arginine Group", fontsize = 26)
		plt.show()
		
		if False:
			regr = linear_model.LinearRegression()
		
			regr.fit(codon_freqs.T, pred_codon_freqs)
			# The coefficients
			#print('Coefficients: \n', regr.coef_**.5)
			# The mean squared error
			#print("Mean squared error: %.2f"
			#      % np.mean((regr.predict(diabetes_X_test) - diabetes_y_test) ** 2))
			# Explained variance score: 1 is perfect prediction
			#print('Variance score: %.2f' % regr.score(diabetes_X_test, diabetes_y_test))
			# Plot outputs
		
			plt.scatter(codon_freqs.T, pred_codon_freqs,  color='black')
			plt.plot(codon_freqs.T, regr.predict(codon_freqs.T), color='blue',
			         linewidth=3)

			plt.xticks(())
			plt.yticks(())
			#plt.xlabel(r' Frequencies from $B.$ $subtilis$ genome', fontsize = 20)
			plt.xlabel(r' Frequencies from $S.$ $cerevisiae$ genome', fontsize = 20)
			#plt.xlabel(r' Frequencies from $90\%$ $E.$ $Coli$ genome', fontsize = 20)
			#plt.ylabel(r' Prediction $(E.$ $coli$ genome fit$)$', fontsize = 20)
			plt.ylabel(r' Prediction $(S.$ $cerevisiae$ genome fit$)$', fontsize = 20)
			#plt.ylabel(r' Prediction $(10\%$ $E.$ $coli$ genome fit$)$', fontsize = 20)
			#plt.text(0.0, .04, r'$R = 0.75$' + '\n' + r'$p \sim 10^{-12}$', fontsize = 20)
			plt.text(0.0, .04, r'$R = 0.72$' + '\n' + r'$p \sim 10^{-11}$', fontsize = 20)
			plt.show()
		
		
			#plt.bar([i for i in range(N)], codon_freqs, width = .5, color = 'red')
	return list(pred_codon_freqs), [amino_counts[amino_acid] for amino_acid in amino_acids]


def Generate_Data(seq, num_data_sets):
	
	out_file = open(organism + '_ppm0_fake_' + str(num_data_sets) + '-fold_'+str(len(seq))+'_param.data', 'w')
	pred_codon_freqs = Get_Freqs(seq)[0]
	
	for h in range(num_data_sets):
	
		codon_data = np.random.multinomial(data_points, pred_codon_freqs)
		
		amino_data = np.zeros(len(amino_acids))
		
		for A in amino_acids:
			for codon in amino_acid_codons[A]:
				i = codons.index(codon)
				amino_data[amino_acids.index(A)] += codon_data[i]/data_points

		
		out_file.write('######################################### codon counts (data set '+str(h)+') #########################################\n')
	
		for i,codon in enumerate(codons):
			out_file.write(codon + ':' + str(codon_data[i])+'\n')
	
		out_file.write('# codon count:'+str(int(data_points))+'\n')
	
		out_file.write('######################################### amino acids (data set '+str(h)+') #########################################\n')
	
		for i,amino in enumerate(amino_acids):
			out_file.write(amino + ':'+str(amino_data[i])+'\n')
	
		out_file.write('# amino acid count:'+str(int(data_points))+'\n')
		print('\tdata set '+str(h))
	out_file.close()
	#return codon_data, amino_data
	

def Get_Fitness(seq):
	pred_codon_freqs, pred_amino_freqs = Get_Freqs(seq)
	logL = 0
	for i,codon in enumerate(codons):
		if pred_codon_freqs[i] > 0.0:
			logL += data_points*codon_freqs[i]*np.log(pred_codon_freqs[i])
		elif codon_freqs[i] > 0.0:
			logL += -data_points*data_points
	
	for i,amino in enumerate(amino_acids):
		if pred_amino_freqs[i] > 0.0:
			logL += data_points*amino_freqs[i]*np.log(pred_amino_freqs[i])
		elif amino_freqs[i] > 0.0:
			logL += -data_points*data_points
			
	#regr = linear_model.LinearRegression()
	#regr.fit(codon_freqs.T, pred_codon_freqs)
	R_c = np.corrcoef([list(codon_freqs)], pred_codon_freqs)[0, 1]
	R_a = np.corrcoef([list(amino_freqs)], pred_amino_freqs)[0, 1]
	#R = stats.pearsonr(codon_freqs.T[0], pred_codon_freqs)
	L2_c = np.real(sum((codon_freqs - pred_codon_freqs)*np.conj(codon_freqs - pred_codon_freqs)))
	L2_a = np.real(sum((amino_freqs - pred_amino_freqs)*np.conj(amino_freqs - pred_amino_freqs)))
	
	L1_c = sum(abs(codon_freqs - pred_codon_freqs))/2
	L1_a = sum(abs(amino_freqs - pred_amino_freqs))/2
	
	return [(logL - best_logL)/(2*data_points), (R_c + R_a)/2, -(L2_c + L2_a)/2, - (L1_c + L1_a)/2, logL]
	
def Get_Energy(seq):
	return list(-np.array(Get_Fitness(seq)))
	
def Get_Marker():
	return 'Codon'
	
def Update_Seq(seq):
	
	#ind_p = list(np.array(mutables)[np.random.randint(len(mutables), size = np.random.exponential(depth))])
	#ind_m = list(np.array(mutables)[np.random.randint(len(mutables), size = np.random.exponential(depth))])
	
	#return [str(max([float(seq[i]) + dx*(ind_p.count(i) - ind_m.count(i)), 0.0])) for i in range(len(seq))]
	
	nns = Get_All_Neighbors(seq)
	return nns[np.random.randint(len(nns))][0]

def Single_Moves(moves):
	
	nns = set([])

	for i in mutables:
		nns.add('_'.join(moves[:i] + [str(int(moves[i]) + 1)] + moves[i+1:]))
		nns.add('_'.join(moves[:i] + [str(int(moves[i]) - 1)] + moves[i+1:]))
		
	return nns

def Get_All_Neighbors(seq):
	global curr_depth, ns
	
	if not curr_depth == depth:
		curr_depth = depth
		ns = Single_Moves(['0' for i in range(len(seq))])
	
		for d in range(depth - 1):
	
			curr_ns = set(ns)
		
			for n in curr_ns:
		
				new_ns = Single_Moves(n.split('_'))
				ns = ns.union(new_ns)
		curr_ns = set(ns)
	
		for n in curr_ns:
			move_sum = sum([abs(int(move)) for move in n.split('_')])
			if move_sum < depth:
				ns.remove(n)
	
	ns = list(ns)
	ns.sort()
	neighbors = [[[str(min([max([float(seq[i]) + dx*int(move), min_vals[i]]), max_vals[i]])) for i,move in enumerate(n.split('_'))],1] for n in ns]
	
	return neighbors
	

def Write_Matrix(seq):
	#N = 3
	mth_scrpt = ''
	in_file = open('systems/Codon/codons.nb', 'r')
	lines = in_file.readlines()
	in_file.close()
	start_i = lines.index('(* Beginning of Notebook Content *)\n')
	end_i = lines.index('WindowSize->{765, 903},\n')
	print(start_i, end_i)
	
	out_file = open('systems/Codon/codons_new.nb', 'w')
	
	for i in range(start_i + 1):
		out_file.write(lines[i])
	
	out_file.write('Notebook[{Cell[BoxData[RowBox[{RowBox[{"M", "=", RowBox[{"\[Beta]", RowBox[{"(", GridBox[{\n')
	
	mut_mat = np.array([['0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' for i in range(N)] for j in range(N)])
	
	for i,codon_1 in enumerate(codons[:N]):
		for j,codon_2 in enumerate(codons[:N]):
			# codon_1 -> codon_2 / i -> j
			if sum([int(codon_1[k] == codon_2[k]) for k in range(len(codon_1))]) == 2:
				mut = round(freqs['pi'+codon_2],6)
				is_tran,del_nuc = is_Transition(codon_1, codon_2)
				if is_tran:
					if del_nuc in ['T', 'C']:
						mut_mat[j][i] = 'RowBox[{"\[Kappa]1", " ", "'+str(mut)[:8]+'"}]'
			
					elif del_nuc in ['A', 'G']:
						mut_mat[j][i] = 'RowBox[{"\[Kappa]2", " ", "'+str(mut)[:8]+'"}]'
				else:
					mut_mat[j][i] = '"' + str(mut)[:8] + '"'
			else:
				mut_mat[j][i] = '"0.0"'
	print(mut_mat)
		
	for j in range(N):
		
		col_sum_num = 0.0
		col_sum_kap1 = 0.0
		col_sum_kap2 = 0.0
		
		for i in range(N):
			if not i == j:
				if not mut_mat[i][j][:3] == 'Row':
					col_sum_num += float(mut_mat[i][j][1:-1])
				else:
					if mut_mat[i][j][17] == '1':
						col_sum_kap1 += float(mut_mat[i][j][27:-3])
					if mut_mat[i][j][17] == '2':
						col_sum_kap2 += float(mut_mat[i][j][27:-3])
						
		mut_mat[j][j] = 'RowBox[{"-", RowBox[{"(", RowBox[{ "' + str(col_sum_num)[:8] + '", "+", RowBox[{"\[Kappa]1", " ", "' + str(col_sum_kap1)[:8] + '"}], "+", RowBox[{"\[Kappa]2", " ", "' + str(col_sum_kap2)[:8] + '"}]}], ")"}]}]'
		#'{"1.", RowBox[{"\[Kappa]1", " ", "2."}], "3."},\n'
		out_file.write('{' + ','.join([mut_mat[j][i] for i in range(N)]) + '}' +','*int(j < N-1)+ '\n')
	out_file.write('}],")"}]}]}], ";"}]], "Input"],\n')
	out_file.write('Cell[BoxData[RowBox[{RowBox[{"U", " ", "=", " ", RowBox[{RowBox[{"IdentityMatrix", "[", "64", "]"}], " ", "+", " ", "M"}]}], ";"}]], "Input",],\n')
	out_file.write('Cell[BoxData[RowBox[{RowBox[{"p", "=", RowBox[{RowBox[{"Eigenvectors", "[", RowBox[{"U", ",", "1"}], "]"}], "[", RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", RowBox[{"p", "/", RowBox[{"Total", "[", "p", "]"}]}]}]], "Input",]},\n')
	
	for i in range(end_i, len(lines)):
		out_file.write(lines[i])
		
	out_file.close()
	
	
	
	
	
	
	
	
	
	
	
	
	
	


